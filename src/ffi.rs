#![allow(non_snake_case)]
/* automatically generated by rust-bindgen */

pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const TSK_VERSION_NUM: u32 = 67633407;
pub const TSK_VERSION_STR: &'static [u8; 6usize] = b"4.8.0\0";
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const _SYS_PARAM_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _BITS_SIGNUM_H: u32 = 1;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 23;
pub const SIGIOT: u32 = 6;
pub const SIGCLD: u32 = 20;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 32;
pub const _NSIG: u32 = 33;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 33;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const __NGREG: u32 = 23;
pub const NGREG: u32 = 23;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const HZ: u32 = 100;
pub const EXEC_PAGESIZE: u32 = 4096;
pub const NOGROUP: i32 = -1;
pub const MAXHOSTNAMELEN: u32 = 64;
pub const MAXSYMLINKS: u32 = 20;
pub const NOFILE: u32 = 256;
pub const NCARGS: u32 = 131072;
pub const NGROUPS: u32 = 65536;
pub const CANBSIZ: u32 = 255;
pub const MAXPATHLEN: u32 = 4096;
pub const DEV_BSIZE: u32 = 512;
pub const PRIttocTSK: &'static [u8; 2usize] = b"s\0";
pub const PRIuSIZE: &'static [u8; 3usize] = b"zu\0";
pub const TSK_ERROR_STRING_MAX_LENGTH: u32 = 1024;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const PRIuINUM: &'static [u8; 3usize] = b"lu\0";
pub const PRIxINUM: &'static [u8; 3usize] = b"lx\0";
pub const PRIuUID: &'static [u8; 2usize] = b"u\0";
pub const PRIxUID: &'static [u8; 2usize] = b"x\0";
pub const PRIuGID: &'static [u8; 2usize] = b"u\0";
pub const PRIxGID: &'static [u8; 2usize] = b"x\0";
pub const PRIuDADDR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxDADDR: &'static [u8; 3usize] = b"lx\0";
pub const PRIxOFF: &'static [u8; 3usize] = b"lx\0";
pub const PRIdOFF: &'static [u8; 3usize] = b"ld\0";
pub const PRIuPNUM: &'static [u8; 2usize] = b"u\0";
pub const PRIxPNUM: &'static [u8; 2usize] = b"x\0";
pub const TSK_ERR_AUX: u32 = 16777216;
pub const TSK_ERR_IMG: u32 = 33554432;
pub const TSK_ERR_VS: u32 = 67108864;
pub const TSK_ERR_FS: u32 = 134217728;
pub const TSK_ERR_HDB: u32 = 268435456;
pub const TSK_ERR_AUTO: u32 = 536870912;
pub const TSK_ERR_POOL: u32 = 1073741824;
pub const TSK_ERR_MASK: u32 = 16777215;
pub const TSK_ERR_AUX_MALLOC: u32 = 16777216;
pub const TSK_ERR_AUX_GENERIC: u32 = 16777218;
pub const TSK_ERR_AUX_MAX: u32 = 2;
pub const TSK_ERR_IMG_NOFILE: u32 = 33554432;
pub const TSK_ERR_IMG_OFFSET: u32 = 33554433;
pub const TSK_ERR_IMG_UNKTYPE: u32 = 33554434;
pub const TSK_ERR_IMG_UNSUPTYPE: u32 = 33554435;
pub const TSK_ERR_IMG_OPEN: u32 = 33554436;
pub const TSK_ERR_IMG_STAT: u32 = 33554437;
pub const TSK_ERR_IMG_SEEK: u32 = 33554438;
pub const TSK_ERR_IMG_READ: u32 = 33554439;
pub const TSK_ERR_IMG_READ_OFF: u32 = 33554440;
pub const TSK_ERR_IMG_ARG: u32 = 33554441;
pub const TSK_ERR_IMG_MAGIC: u32 = 33554442;
pub const TSK_ERR_IMG_WRITE: u32 = 33554443;
pub const TSK_ERR_IMG_CONVERT: u32 = 33554444;
pub const TSK_ERR_IMG_PASSWD: u32 = 33554445;
pub const TSK_ERR_IMG_MAX: u32 = 14;
pub const TSK_ERR_VS_UNKTYPE: u32 = 67108864;
pub const TSK_ERR_VS_UNSUPTYPE: u32 = 67108865;
pub const TSK_ERR_VS_READ: u32 = 67108866;
pub const TSK_ERR_VS_MAGIC: u32 = 67108867;
pub const TSK_ERR_VS_WALK_RNG: u32 = 67108868;
pub const TSK_ERR_VS_BUF: u32 = 67108869;
pub const TSK_ERR_VS_BLK_NUM: u32 = 67108870;
pub const TSK_ERR_VS_ARG: u32 = 67108871;
pub const TSK_ERR_VS_MAX: u32 = 8;
pub const TSK_ERR_POOL_UNKTYPE: u32 = 1073741824;
pub const TSK_ERR_POOL_UNSUPTYPE: u32 = 33554433;
pub const TSK_ERR_POOL_ARG: u32 = 1073741826;
pub const TSK_ERR_POOL_GENPOOL: u32 = 1073741827;
pub const TSK_ERR_POOL_MAX: u32 = 4;
pub const TSK_ERR_FS_UNKTYPE: u32 = 134217728;
pub const TSK_ERR_FS_UNSUPTYPE: u32 = 134217729;
pub const TSK_ERR_FS_UNSUPFUNC: u32 = 134217730;
pub const TSK_ERR_FS_WALK_RNG: u32 = 134217731;
pub const TSK_ERR_FS_READ: u32 = 134217732;
pub const TSK_ERR_FS_READ_OFF: u32 = 134217733;
pub const TSK_ERR_FS_ARG: u32 = 134217734;
pub const TSK_ERR_FS_BLK_NUM: u32 = 134217735;
pub const TSK_ERR_FS_INODE_NUM: u32 = 134217736;
pub const TSK_ERR_FS_INODE_COR: u32 = 134217737;
pub const TSK_ERR_FS_MAGIC: u32 = 134217738;
pub const TSK_ERR_FS_FWALK: u32 = 134217739;
pub const TSK_ERR_FS_WRITE: u32 = 134217740;
pub const TSK_ERR_FS_UNICODE: u32 = 134217741;
pub const TSK_ERR_FS_RECOVER: u32 = 134217742;
pub const TSK_ERR_FS_GENFS: u32 = 134217743;
pub const TSK_ERR_FS_CORRUPT: u32 = 134217744;
pub const TSK_ERR_FS_ATTR_NOTFOUND: u32 = 134217745;
pub const TSK_ERR_FS_MAX: u32 = 18;
pub const TSK_ERR_HDB_UNKTYPE: u32 = 268435456;
pub const TSK_ERR_HDB_UNSUPTYPE: u32 = 268435457;
pub const TSK_ERR_HDB_READDB: u32 = 268435458;
pub const TSK_ERR_HDB_READIDX: u32 = 268435459;
pub const TSK_ERR_HDB_ARG: u32 = 268435460;
pub const TSK_ERR_HDB_WRITE: u32 = 268435461;
pub const TSK_ERR_HDB_CREATE: u32 = 268435462;
pub const TSK_ERR_HDB_DELETE: u32 = 268435463;
pub const TSK_ERR_HDB_MISSING: u32 = 268435464;
pub const TSK_ERR_HDB_PROC: u32 = 268435465;
pub const TSK_ERR_HDB_OPEN: u32 = 268435466;
pub const TSK_ERR_HDB_CORRUPT: u32 = 268435467;
pub const TSK_ERR_HDB_UNSUPFUNC: u32 = 268435467;
pub const TSK_ERR_HDB_MAX: u32 = 13;
pub const TSK_ERR_AUTO_DB: u32 = 536870912;
pub const TSK_ERR_AUTO_CORRUPT: u32 = 536870913;
pub const TSK_ERR_AUTO_UNICODE: u32 = 536870914;
pub const TSK_ERR_AUTO_NOTOPEN: u32 = 536870915;
pub const TSK_ERR_AUTO_MAX: u32 = 4;
pub const FALSE: u32 = 0;
pub const TSK_MD5_DIGEST_LENGTH: u32 = 16;
pub const TSK_SHA_DIGEST_LENGTH: u32 = 32;
pub const TSK_IMG_INFO_CACHE_NUM: u32 = 32;
pub const TSK_IMG_INFO_CACHE_LEN: u32 = 65536;
pub const TSK_IMG_INFO_TAG: u32 = 958415409;
pub const TSK_VS_INFO_TAG: u32 = 1378883138;
pub const TSK_VS_PART_INFO_TAG: u32 = 1074926163;
pub const TSK_FS_BLOCK_TAG: u32 = 461127498;
pub const TSK_FS_ATTR_ID_DEFAULT: u32 = 0;
pub const TSK_FS_META_NAME_LIST_NSIZE: u32 = 512;
pub const TSK_FS_META_TYPE_STR_MAX: u32 = 12;
pub const TSK_FS_META_TAG: u32 = 324159029;
pub const TSK_FS_ORPHAN_STR: &'static [u8; 14usize] = b"-ORPHAN_FILE-\0";
pub const TSK_FS_NAME_TYPE_STR_MAX: u32 = 12;
pub const TSK_FS_NAME_TAG: u32 = 588544105;
pub const TSK_FS_DIR_TAG: u32 = 1465061958;
pub const TSK_FS_FILE_TAG: u32 = 287384082;
pub const TSK_FS_INFO_TAG: u32 = 269488144;
pub const TSK_FS_INFO_FS_ID_LEN: u32 = 32;
pub const TSK_HDB_HTYPE_MD5_STR: &'static [u8; 4usize] = b"md5\0";
pub const TSK_HDB_HTYPE_SHA1_STR: &'static [u8; 5usize] = b"sha1\0";
pub const TSK_HDB_HTYPE_SHA2_256_STR: &'static [u8; 9usize] = b"sha2_256\0";
pub const TSK_HDB_HTYPE_SHA2_256_LEN: u32 = 64;
pub const TSK_HDB_HTYPE_SHA1_LEN: u32 = 40;
pub const TSK_HDB_HTYPE_MD5_LEN: u32 = 32;
pub const TSK_HDB_HTYPE_CRC32_LEN: u32 = 8;
pub const TSK_HDB_MAX_BINHASH_LEN: u32 = 32;
pub const TSK_HDB_DBTYPE_NSRL_STR: &'static [u8; 5usize] = b"nsrl\0";
pub const TSK_HDB_DBTYPE_NSRL_MD5_STR: &'static [u8; 9usize] = b"nsrl-md5\0";
pub const TSK_HDB_DBTYPE_NSRL_SHA1_STR: &'static [u8; 10usize] = b"nsrl-sha1\0";
pub const TSK_HDB_DBTYPE_MD5SUM_STR: &'static [u8; 7usize] = b"md5sum\0";
pub const TSK_HDB_DBTYPE_HK_STR: &'static [u8; 3usize] = b"hk\0";
pub const TSK_HDB_DBTYPE_ENCASE_STR: &'static [u8; 7usize] = b"encase\0";
pub const TSK_HDB_DBTYPE_SUPPORT_STR: &'static [u8; 40usize] =
    b"nsrl-md5, nsrl-sha1, md5sum, encase, hk\0";
pub const TSK_HDB_NAME_MAXLEN: u32 = 512;
pub const TSK_POOL_INFO_TAG: u32 = 1347374156;
pub const TSK_POOL_VOL_INFO_TAG: u32 = 1347833676;
pub type size_t = ::std::os::raw::c_ulong;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(
        arg1: *mut _IO_FILE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_1 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_1 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_1 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = 7;
pub const _PC_VDISABLE: _bindgen_ty_1 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_1 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_1 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = 20;
pub type _bindgen_ty_1 = u32;
pub const _SC_ARG_MAX: _bindgen_ty_2 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_2 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = 10;
pub const _SC_TIMERS: _bindgen_ty_2 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = 14;
pub const _SC_FSYNC: _bindgen_ty_2 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_2 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_2 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = 28;
pub const _SC_VERSION: _bindgen_ty_2 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_2 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_2 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = 45;
pub const _SC_2_VERSION: _bindgen_ty_2 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_2 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_2 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = 52;
pub const _SC_PII: _bindgen_ty_2 = 53;
pub const _SC_PII_XTI: _bindgen_ty_2 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = 56;
pub const _SC_PII_OSI: _bindgen_ty_2 = 57;
pub const _SC_POLL: _bindgen_ty_2 = 58;
pub const _SC_SELECT: _bindgen_ty_2 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_2 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = 66;
pub const _SC_THREADS: _bindgen_ty_2 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_2 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = 96;
pub const _SC_2_UPE: _bindgen_ty_2 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = 103;
pub const _SC_INT_MAX: _bindgen_ty_2 = 104;
pub const _SC_INT_MIN: _bindgen_ty_2 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_2 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_2 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = 108;
pub const _SC_NZERO: _bindgen_ty_2 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_2 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_2 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = 132;
pub const _SC_BARRIERS: _bindgen_ty_2 = 133;
pub const _SC_BASE: _bindgen_ty_2 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = 137;
pub const _SC_CPUTIME: _bindgen_ty_2 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_2 = 143;
pub const _SC_FIFO: _bindgen_ty_2 = 144;
pub const _SC_PIPE: _bindgen_ty_2 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = 151;
pub const _SC_NETWORKING: _bindgen_ty_2 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = 154;
pub const _SC_REGEXP: _bindgen_ty_2 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = 156;
pub const _SC_SHELL: _bindgen_ty_2 = 157;
pub const _SC_SIGNALS: _bindgen_ty_2 = 158;
pub const _SC_SPAWN: _bindgen_ty_2 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = 167;
pub const _SC_2_PBS: _bindgen_ty_2 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = 173;
pub const _SC_STREAMS: _bindgen_ty_2 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = 180;
pub const _SC_TRACE: _bindgen_ty_2 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = 199;
pub const _SC_IPV6: _bindgen_ty_2 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 = 248;
pub type _bindgen_ty_2 = u32;
pub const _CS_PATH: _bindgen_ty_3 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_3 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_3 = 1149;
pub type _bindgen_ty_3 = u32;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
    _bindgen_union_align: [u64; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_tid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_overrun as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_sigval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_sigval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_status as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_utime as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_stime as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            >()))
            ._lower as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_lower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            >()))
            ._upper as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_upper)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))
                ._addr_bnd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_addr_bnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))._pkey
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_pkey)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr_lsb
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()))._bounds as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_band as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_fd as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._call_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._syscall as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._arch as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._kill as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._rt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigchld as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigfault as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigpoll as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigsys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).__pad0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>()))._sifields as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
pub const SI_ASYNCNL: _bindgen_ty_4 = -60;
pub const SI_TKILL: _bindgen_ty_4 = -6;
pub const SI_SIGIO: _bindgen_ty_4 = -5;
pub const SI_ASYNCIO: _bindgen_ty_4 = -4;
pub const SI_MESGQ: _bindgen_ty_4 = -3;
pub const SI_TIMER: _bindgen_ty_4 = -2;
pub const SI_QUEUE: _bindgen_ty_4 = -1;
pub const SI_USER: _bindgen_ty_4 = 0;
pub const SI_KERNEL: _bindgen_ty_4 = 128;
pub type _bindgen_ty_4 = i32;
pub const ILL_ILLOPC: _bindgen_ty_5 = 1;
pub const ILL_ILLOPN: _bindgen_ty_5 = 2;
pub const ILL_ILLADR: _bindgen_ty_5 = 3;
pub const ILL_ILLTRP: _bindgen_ty_5 = 4;
pub const ILL_PRVOPC: _bindgen_ty_5 = 5;
pub const ILL_PRVREG: _bindgen_ty_5 = 6;
pub const ILL_COPROC: _bindgen_ty_5 = 7;
pub const ILL_BADSTK: _bindgen_ty_5 = 8;
pub type _bindgen_ty_5 = u32;
pub const FPE_INTDIV: _bindgen_ty_6 = 1;
pub const FPE_INTOVF: _bindgen_ty_6 = 2;
pub const FPE_FLTDIV: _bindgen_ty_6 = 3;
pub const FPE_FLTOVF: _bindgen_ty_6 = 4;
pub const FPE_FLTUND: _bindgen_ty_6 = 5;
pub const FPE_FLTRES: _bindgen_ty_6 = 6;
pub const FPE_FLTINV: _bindgen_ty_6 = 7;
pub const FPE_FLTSUB: _bindgen_ty_6 = 8;
pub type _bindgen_ty_6 = u32;
pub const SEGV_MAPERR: _bindgen_ty_7 = 1;
pub const SEGV_ACCERR: _bindgen_ty_7 = 2;
pub const SEGV_BNDERR: _bindgen_ty_7 = 3;
pub const SEGV_PKUERR: _bindgen_ty_7 = 4;
pub type _bindgen_ty_7 = u32;
pub const BUS_ADRALN: _bindgen_ty_8 = 1;
pub const BUS_ADRERR: _bindgen_ty_8 = 2;
pub const BUS_OBJERR: _bindgen_ty_8 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_8 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_8 = 5;
pub type _bindgen_ty_8 = u32;
pub const CLD_EXITED: _bindgen_ty_9 = 1;
pub const CLD_KILLED: _bindgen_ty_9 = 2;
pub const CLD_DUMPED: _bindgen_ty_9 = 3;
pub const CLD_TRAPPED: _bindgen_ty_9 = 4;
pub const CLD_STOPPED: _bindgen_ty_9 = 5;
pub const CLD_CONTINUED: _bindgen_ty_9 = 6;
pub type _bindgen_ty_9 = u32;
pub const POLL_IN: _bindgen_ty_10 = 1;
pub const POLL_OUT: _bindgen_ty_10 = 2;
pub const POLL_MSG: _bindgen_ty_10 = 3;
pub const POLL_ERR: _bindgen_ty_10 = 4;
pub const POLL_PRI: _bindgen_ty_10 = 5;
pub const POLL_HUP: _bindgen_ty_10 = 6;
pub type _bindgen_ty_10 = u32;
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._function as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._attribute as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._tid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._sigev_thread as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>()))._sigev_un as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(_sigev_un)
        )
    );
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_11 = 0;
pub const SIGEV_NONE: _bindgen_ty_11 = 1;
pub const SIGEV_THREAD: _bindgen_ty_11 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_11 = 4;
pub type _bindgen_ty_11 = u32;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
        -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_handler as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_sigaction as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_sigaction)
        )
    );
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        152usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_restorer as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_restorer)
        )
    );
}
extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub __glibc_reserved1: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    assert_eq!(
        ::std::mem::size_of::<_fpx_sw_bytes>(),
        48usize,
        concat!("Size of: ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpx_sw_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).magic1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(magic1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).extended_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(extended_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_bv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).__glibc_reserved1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    assert_eq!(
        ::std::mem::size_of::<_fpreg>(),
        10usize,
        concat!("Size of: ", stringify!(_fpreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(exponent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    assert_eq!(
        ::std::mem::size_of::<_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpxreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).__glibc_reserved1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_xmmreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmmreg>())).element as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    assert_eq!(
        ::std::mem::size_of::<_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).swd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).ftw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).fop as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).rip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).rdp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).mxcsr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).mxcr_mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>()))._st as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>()))._xmm as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).__glibc_reserved1 as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).fpstate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).__fpstate_word as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(__fpstate_word)
        )
    );
}
#[test]
fn bindgen_test_layout_sigcontext() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        256usize,
        concat!("Size of: ", stringify!(sigcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r9 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r10 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r11 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r12 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r13 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r14 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r15 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rdi as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rsi as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rbp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rbx as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rdx as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rax as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rcx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rcx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rsp as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rip as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).eflags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).cs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).gs as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(gs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).fs as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).__pad0 as *const _ as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).err as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).trapno as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(trapno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).oldmask as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(oldmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).cr2 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).__reserved1 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub __glibc_reserved1: [__uint64_t; 2usize],
    pub __glibc_reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    assert_eq!(
        ::std::mem::size_of::<_xsave_hdr>(),
        64usize,
        concat!("Size of: ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsave_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).xstate_bv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).__glibc_reserved1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).__glibc_reserved2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    assert_eq!(
        ::std::mem::size_of::<_ymmh_state>(),
        256usize,
        concat!("Size of: ", stringify!(_ymmh_state))
    );
    assert_eq!(
        ::std::mem::align_of::<_ymmh_state>(),
        4usize,
        concat!("Alignment of ", stringify!(_ymmh_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ymmh_state>())).ymmh_space as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ymmh_state),
            "::",
            stringify!(ymmh_space)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    assert_eq!(
        ::std::mem::size_of::<_xstate>(),
        832usize,
        concat!("Size of: ", stringify!(_xstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_xstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_xstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).fpstate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).xstate_hdr as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(xstate_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).ymmh as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(ymmh)
        )
    );
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: size_t,
}
#[test]
fn bindgen_test_layout_stack_t() {
    assert_eq!(
        ::std::mem::size_of::<stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(stack_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_t>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_t>())).ss_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_t>())).ss_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).__glibc_reserved1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<_libc_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_xmmreg>())).element as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).swd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).ftw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).fop as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).rip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).rdp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).mxcsr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).mxcr_mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>()))._st as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>()))._xmm as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).__glibc_reserved1 as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    assert_eq!(
        ::std::mem::size_of::<mcontext_t>(),
        256usize,
        concat!("Size of: ", stringify!(mcontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mcontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mcontext_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).gregs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(gregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).fpregs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(fpregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).__reserved1 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: sigset_t,
    pub __fpregs_mem: _libc_fpstate,
}
#[test]
fn bindgen_test_layout_ucontext_t() {
    assert_eq!(
        ::std::mem::size_of::<ucontext_t>(),
        936usize,
        concat!("Size of: ", stringify!(ucontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ucontext_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_stack as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_mcontext as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_mcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_sigmask as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).__fpregs_mem as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__fpregs_mem)
        )
    );
}
extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const SS_ONSTACK: _bindgen_ty_12 = 1;
pub const SS_DISABLE: _bindgen_ty_12 = 2;
pub type _bindgen_ty_12 = u32;
extern "C" {
    pub fn sigaltstack(__ss: *const stack_t, __oss: *mut stack_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
pub type TSK_TCHAR = ::std::os::raw::c_char;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TSK_ERROR_INFO {
    pub t_errno: u32,
    pub errstr: [::std::os::raw::c_char; 1025usize],
    pub errstr2: [::std::os::raw::c_char; 1025usize],
    pub errstr_print: [::std::os::raw::c_char; 1025usize],
}
#[test]
fn bindgen_test_layout_TSK_ERROR_INFO() {
    assert_eq!(
        ::std::mem::size_of::<TSK_ERROR_INFO>(),
        3080usize,
        concat!("Size of: ", stringify!(TSK_ERROR_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_ERROR_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(TSK_ERROR_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_ERROR_INFO>())).t_errno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_ERROR_INFO),
            "::",
            stringify!(t_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_ERROR_INFO>())).errstr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_ERROR_INFO),
            "::",
            stringify!(errstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_ERROR_INFO>())).errstr2 as *const _ as usize },
        1029usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_ERROR_INFO),
            "::",
            stringify!(errstr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_ERROR_INFO>())).errstr_print as *const _ as usize },
        2054usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_ERROR_INFO),
            "::",
            stringify!(errstr_print)
        )
    );
}
extern "C" {
    pub fn tsk_error_get_info() -> *mut TSK_ERROR_INFO;
}
extern "C" {
    pub fn tsk_error_get_errno() -> u32;
}
extern "C" {
    pub fn tsk_error_set_errno(t_errno: u32);
}
extern "C" {
    pub fn tsk_error_get_errstr() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tsk_error_set_errstr(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn tsk_error_vset_errstr(format: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn tsk_error_get_errstr2() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tsk_error_set_errstr2(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn tsk_error_vset_errstr2(format: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn tsk_error_errstr2_concat(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = " Return a human-readable form of tsk_error_get_errno"]
    pub fn tsk_error_get() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tsk_error_print(arg1: *mut FILE);
}
extern "C" {
    pub fn tsk_error_reset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: size_t, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: size_t) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_13 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_13 = 1;
pub type _bindgen_ty_13 = u32;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_14 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_14 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_14 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_14 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_14 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_14 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_14 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_14 = 0;
pub type _bindgen_ty_14 = u32;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_15 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_15 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_15 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_15 = 1;
pub type _bindgen_ty_15 = u32;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_16 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_16 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_16 = 2;
pub type _bindgen_ty_16 = u32;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_17 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_17 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_17 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_17 = 0;
pub type _bindgen_ty_17 = u32;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_18 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_18 = 1;
pub type _bindgen_ty_18 = u32;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_19 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_19 = 1;
pub type _bindgen_ty_19 = u32;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_20 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_20 = 1;
pub type _bindgen_ty_20 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_21 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_21 = 1;
pub type _bindgen_ty_21 = u32;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_22 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_22 = 1;
pub type _bindgen_ty_22 = u32;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        104usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tsk_lock_t {
    pub mutex: pthread_mutex_t,
}
#[test]
fn bindgen_test_layout_tsk_lock_t() {
    assert_eq!(
        ::std::mem::size_of::<tsk_lock_t>(),
        40usize,
        concat!("Size of: ", stringify!(tsk_lock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tsk_lock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tsk_lock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tsk_lock_t>())).mutex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tsk_lock_t),
            "::",
            stringify!(mutex)
        )
    );
}
#[doc = "< Ok -- success"]
pub const TSK_RETVAL_ENUM_TSK_OK: TSK_RETVAL_ENUM = 0;
#[doc = "< System error -- should abort"]
pub const TSK_RETVAL_ENUM_TSK_ERR: TSK_RETVAL_ENUM = 1;
#[doc = "< Data is corrupt, can still process another set of data"]
pub const TSK_RETVAL_ENUM_TSK_COR: TSK_RETVAL_ENUM = 2;
#[doc = "< Stop further processing, not an error though."]
pub const TSK_RETVAL_ENUM_TSK_STOP: TSK_RETVAL_ENUM = 3;
#[doc = " Return values for some TSK functions that need to differentiate between errors and corrupt data."]
pub type TSK_RETVAL_ENUM = u32;
#[doc = " Linked list structure that holds a 'key' and optional 'length'."]
#[doc = " Note that the data is stored in reverse sort order so that inserts"]
#[doc = " are faster.  Also note that the length is a negative number. A key of"]
#[doc = " '6' and a len of '2' means that the run contains 6 and 5."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_LIST {
    #[doc = "< Pointer to next entry in list"]
    pub next: *mut TSK_LIST,
    #[doc = "< Largest value in this run"]
    pub key: u64,
    #[doc = "< Length of run (negative number, stored as positive)"]
    pub len: u64,
}
#[test]
fn bindgen_test_layout_TSK_LIST() {
    assert_eq!(
        ::std::mem::size_of::<TSK_LIST>(),
        24usize,
        concat!("Size of: ", stringify!(TSK_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_LIST>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_LIST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_LIST>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_LIST),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_LIST>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_LIST),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_LIST>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_LIST),
            "::",
            stringify!(len)
        )
    );
}
extern "C" {
    pub fn tsk_list_find(list: *mut TSK_LIST, key: u64) -> u8;
}
extern "C" {
    pub fn tsk_list_add(list: *mut *mut TSK_LIST, key: u64) -> u8;
}
extern "C" {
    pub fn tsk_list_free(list: *mut TSK_LIST);
}
#[doc = " Basic stack structure to push and pop (used for finding loops in recursion)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_STACK {
    #[doc = "< Array that contains the values in the stack"]
    pub vals: *mut u64,
    #[doc = "< Index to the top stack entry"]
    pub top: size_t,
    #[doc = "< Number of entries in the stack"]
    pub len: size_t,
}
#[test]
fn bindgen_test_layout_TSK_STACK() {
    assert_eq!(
        ::std::mem::size_of::<TSK_STACK>(),
        24usize,
        concat!("Size of: ", stringify!(TSK_STACK))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_STACK>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_STACK))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_STACK>())).vals as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_STACK),
            "::",
            stringify!(vals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_STACK>())).top as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_STACK),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_STACK>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_STACK),
            "::",
            stringify!(len)
        )
    );
}
extern "C" {
    pub fn tsk_stack_push(stack: *mut TSK_STACK, key: u64) -> u8;
}
extern "C" {
    pub fn tsk_stack_pop(stack: *mut TSK_STACK);
}
extern "C" {
    pub fn tsk_stack_find(stack: *mut TSK_STACK, key: u64) -> u8;
}
extern "C" {
    pub fn tsk_stack_free(stack: *mut TSK_STACK);
}
extern "C" {
    pub fn tsk_stack_create() -> *mut TSK_STACK;
}
extern "C" {
    pub fn tsk_fprintf(fd: *mut FILE, msg: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn tsk_printf(msg: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn tsk_print_sanitized(
        fd: *mut FILE,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type TSK_INUM_T = u64;
pub type TSK_UID_T = u32;
pub type TSK_GID_T = u32;
pub type TSK_DADDR_T = u64;
pub type TSK_OFF_T = i64;
pub type TSK_PNUM_T = u32;
extern "C" {
    pub fn tsk_version_print(arg1: *mut FILE);
}
extern "C" {
    pub fn tsk_version_get_str() -> *const ::std::os::raw::c_char;
}
#[doc = "< Walk function should continue to next object"]
pub const TSK_WALK_RET_ENUM_TSK_WALK_CONT: TSK_WALK_RET_ENUM = 0;
#[doc = "< Walk function should stop processing units and return OK"]
pub const TSK_WALK_RET_ENUM_TSK_WALK_STOP: TSK_WALK_RET_ENUM = 1;
#[doc = "< Walk function should stop processing units and return error"]
pub const TSK_WALK_RET_ENUM_TSK_WALK_ERROR: TSK_WALK_RET_ENUM = 2;
#[doc = " Values that callback functions can return to calling walk function."]
pub type TSK_WALK_RET_ENUM = u32;
extern "C" {
    pub static mut tsk_verbose: ::std::os::raw::c_int;
}
#[doc = "< Endianness is unknown"]
pub const TSK_ENDIAN_ENUM_TSK_UNKNOWN_ENDIAN: TSK_ENDIAN_ENUM = 0;
#[doc = "< Data is in little endian"]
pub const TSK_ENDIAN_ENUM_TSK_LIT_ENDIAN: TSK_ENDIAN_ENUM = 1;
#[doc = "< Data is in big endian"]
pub const TSK_ENDIAN_ENUM_TSK_BIG_ENDIAN: TSK_ENDIAN_ENUM = 2;
#[doc = " Flag that identifies the endian ordering of the data being read."]
pub type TSK_ENDIAN_ENUM = u32;
extern "C" {
    pub fn tsk_parse_offset(arg1: *const TSK_TCHAR) -> TSK_OFF_T;
}
extern "C" {
    pub fn tsk_parse_pnum(
        a_pnum_str: *const TSK_TCHAR,
        a_pnum: *mut TSK_PNUM_T,
    ) -> ::std::os::raw::c_int;
}
pub type POINTER = *mut ::std::os::raw::c_uchar;
pub type UINT2 = u16;
pub type UINT4 = u32;
pub type BYTE = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TSK_MD5_CTX {
    pub state: [UINT4; 4usize],
    pub count: [UINT4; 2usize],
    pub buffer: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_TSK_MD5_CTX() {
    assert_eq!(
        ::std::mem::size_of::<TSK_MD5_CTX>(),
        88usize,
        concat!("Size of: ", stringify!(TSK_MD5_CTX))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_MD5_CTX>(),
        4usize,
        concat!("Alignment of ", stringify!(TSK_MD5_CTX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_MD5_CTX>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_MD5_CTX),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_MD5_CTX>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_MD5_CTX),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_MD5_CTX>())).buffer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_MD5_CTX),
            "::",
            stringify!(buffer)
        )
    );
}
extern "C" {
    pub fn TSK_MD5_Init(arg1: *mut TSK_MD5_CTX);
}
extern "C" {
    pub fn TSK_MD5_Update(
        arg1: *mut TSK_MD5_CTX,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn TSK_MD5_Final(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut TSK_MD5_CTX);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_SHA_CTX {
    pub digest: [UINT4; 5usize],
    pub countLo: UINT4,
    pub countHi: UINT4,
    pub data: [UINT4; 16usize],
    pub Endianness: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TSK_SHA_CTX() {
    assert_eq!(
        ::std::mem::size_of::<TSK_SHA_CTX>(),
        96usize,
        concat!("Size of: ", stringify!(TSK_SHA_CTX))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_SHA_CTX>(),
        4usize,
        concat!("Alignment of ", stringify!(TSK_SHA_CTX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_SHA_CTX>())).digest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_SHA_CTX),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_SHA_CTX>())).countLo as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_SHA_CTX),
            "::",
            stringify!(countLo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_SHA_CTX>())).countHi as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_SHA_CTX),
            "::",
            stringify!(countHi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_SHA_CTX>())).data as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_SHA_CTX),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_SHA_CTX>())).Endianness as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_SHA_CTX),
            "::",
            stringify!(Endianness)
        )
    );
}
extern "C" {
    pub fn TSK_SHA_Init(arg1: *mut TSK_SHA_CTX);
}
extern "C" {
    pub fn TSK_SHA_Update(arg1: *mut TSK_SHA_CTX, buffer: *mut BYTE, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSK_SHA_Final(output: *mut BYTE, arg1: *mut TSK_SHA_CTX);
}
pub const TSK_BASE_HASH_ENUM_TSK_BASE_HASH_INVALID_ID: TSK_BASE_HASH_ENUM = 0;
pub const TSK_BASE_HASH_ENUM_TSK_BASE_HASH_MD5: TSK_BASE_HASH_ENUM = 1;
pub const TSK_BASE_HASH_ENUM_TSK_BASE_HASH_SHA1: TSK_BASE_HASH_ENUM = 2;
pub type TSK_BASE_HASH_ENUM = u32;
#[doc = "< Use autodetection methods"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_DETECT: TSK_IMG_TYPE_ENUM = 0;
#[doc = "< Raw disk image (single or split)"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_RAW: TSK_IMG_TYPE_ENUM = 1;
#[doc = "< Raw single (backward compatibility) depreciated"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_RAW_SING: TSK_IMG_TYPE_ENUM = 1;
#[doc = "< Raw single (backward compatibility) depreciated"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_RAW_SPLIT: TSK_IMG_TYPE_ENUM = 1;
#[doc = "< AFF AFF Format"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_AFF_AFF: TSK_IMG_TYPE_ENUM = 4;
#[doc = "< AFD AFF Format"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_AFF_AFD: TSK_IMG_TYPE_ENUM = 8;
#[doc = "< AFM AFF Format"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_AFF_AFM: TSK_IMG_TYPE_ENUM = 16;
#[doc = "< Any format supported by AFFLIB (including beta ones)"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_AFF_ANY: TSK_IMG_TYPE_ENUM = 32;
#[doc = "< EWF version"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_EWF_EWF: TSK_IMG_TYPE_ENUM = 64;
#[doc = "< VMDK version"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_VMDK_VMDK: TSK_IMG_TYPE_ENUM = 128;
#[doc = "< VHD version"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_VHD_VHD: TSK_IMG_TYPE_ENUM = 256;
#[doc = "< external defined format which at least implements TSK_IMG_INFO, used by pytsk"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_EXTERNAL: TSK_IMG_TYPE_ENUM = 4096;
#[doc = "< Pool"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_POOL: TSK_IMG_TYPE_ENUM = 16384;
#[doc = "< Unsupported disk image type"]
pub const TSK_IMG_TYPE_ENUM_TSK_IMG_TYPE_UNSUPP: TSK_IMG_TYPE_ENUM = 65535;
#[doc = " Flag values for the disk image format type.  Each type has a"]
#[doc = " bit associated with it.  There are TSK_IMG_TYPE_ISXXX macros"]
#[doc = " to determine the broad group of the type (raw vs aff etc.)"]
pub type TSK_IMG_TYPE_ENUM = u32;
#[doc = " Created when a disk image has been opened and stores general information and handles."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TSK_IMG_INFO {
    #[doc = "< Set to TSK_IMG_INFO_TAG when struct is alloc"]
    pub tag: u32,
    #[doc = "< Type of disk image format"]
    pub itype: TSK_IMG_TYPE_ENUM,
    #[doc = "< Total size of image in bytes"]
    pub size: TSK_OFF_T,
    #[doc = "< Number of image files"]
    pub num_img: ::std::os::raw::c_int,
    #[doc = "< sector size of device in bytes (typically 512)"]
    pub sector_size: ::std::os::raw::c_uint,
    #[doc = "< page size of NAND page in bytes (defaults to 2048)"]
    pub page_size: ::std::os::raw::c_uint,
    #[doc = "< spare or OOB size of NAND in bytes (defaults to 64)"]
    pub spare_size: ::std::os::raw::c_uint,
    #[doc = "< Image names"]
    pub images: *mut *mut TSK_TCHAR,
    #[doc = "< Lock for cache and associated values"]
    pub cache_lock: tsk_lock_t,
    #[doc = "< read cache (r/w shared - lock)"]
    pub cache: [[::std::os::raw::c_char; 65536usize]; 32usize],
    #[doc = "< starting byte offset of corresponding cache entry (r/w shared - lock)"]
    pub cache_off: [TSK_OFF_T; 32usize],
    #[doc = "< \"Age\" of corresponding cache entry, higher means more recently used (r/w shared - lock)"]
    pub cache_age: [::std::os::raw::c_int; 32usize],
    #[doc = "< Length of cache entry used (0 if never used) (r/w shared - lock)"]
    pub cache_len: [size_t; 32usize],
    #[doc = "< \\internal External progs should call tsk_img_read()"]
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            img: *mut TSK_IMG_INFO,
            off: TSK_OFF_T,
            buf: *mut ::std::os::raw::c_char,
            len: size_t,
        ) -> ssize_t,
    >,
    #[doc = "< \\internal Progs should call tsk_img_close()"]
    pub close: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_IMG_INFO)>,
    #[doc = "< Pointer to file type specific function"]
    pub imgstat:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_IMG_INFO, arg2: *mut FILE)>,
}
#[test]
fn bindgen_test_layout_TSK_IMG_INFO() {
    assert_eq!(
        ::std::mem::size_of::<TSK_IMG_INFO>(),
        2097896usize,
        concat!("Size of: ", stringify!(TSK_IMG_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_IMG_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_IMG_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).itype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(itype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).num_img as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(num_img)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).sector_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(sector_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).page_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).spare_size as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(spare_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).images as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(images)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).cache_lock as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(cache_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).cache as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).cache_off as *const _ as usize },
        2097232usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(cache_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).cache_age as *const _ as usize },
        2097488usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(cache_age)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).cache_len as *const _ as usize },
        2097616usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(cache_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).read as *const _ as usize },
        2097872usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).close as *const _ as usize },
        2097880usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_IMG_INFO>())).imgstat as *const _ as usize },
        2097888usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_IMG_INFO),
            "::",
            stringify!(imgstat)
        )
    );
}
extern "C" {
    pub fn tsk_img_open_sing(
        a_image: *const TSK_TCHAR,
        type_: TSK_IMG_TYPE_ENUM,
        a_ssize: ::std::os::raw::c_uint,
    ) -> *mut TSK_IMG_INFO;
}
extern "C" {
    pub fn tsk_img_open(
        arg1: ::std::os::raw::c_int,
        images: *const *const TSK_TCHAR,
        arg2: TSK_IMG_TYPE_ENUM,
        a_ssize: ::std::os::raw::c_uint,
    ) -> *mut TSK_IMG_INFO;
}
extern "C" {
    pub fn tsk_img_open_utf8_sing(
        a_image: *const ::std::os::raw::c_char,
        type_: TSK_IMG_TYPE_ENUM,
        a_ssize: ::std::os::raw::c_uint,
    ) -> *mut TSK_IMG_INFO;
}
extern "C" {
    pub fn tsk_img_open_utf8(
        num_img: ::std::os::raw::c_int,
        images: *const *const ::std::os::raw::c_char,
        type_: TSK_IMG_TYPE_ENUM,
        a_ssize: ::std::os::raw::c_uint,
    ) -> *mut TSK_IMG_INFO;
}
extern "C" {
    pub fn tsk_img_open_external(
        ext_img_info: *mut ::std::os::raw::c_void,
        size: TSK_OFF_T,
        sector_size: ::std::os::raw::c_uint,
        read: ::std::option::Option<
            unsafe extern "C" fn(
                img: *mut TSK_IMG_INFO,
                off: TSK_OFF_T,
                buf: *mut ::std::os::raw::c_char,
                len: size_t,
            ) -> ssize_t,
        >,
        close: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_IMG_INFO)>,
        imgstat: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut TSK_IMG_INFO, arg2: *mut FILE),
        >,
    ) -> *mut TSK_IMG_INFO;
}
extern "C" {
    pub fn tsk_img_close(arg1: *mut TSK_IMG_INFO);
}
extern "C" {
    pub fn tsk_img_read(
        img: *mut TSK_IMG_INFO,
        off: TSK_OFF_T,
        buf: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn tsk_img_type_toid_utf8(arg1: *const ::std::os::raw::c_char) -> TSK_IMG_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_img_type_toid(arg1: *const TSK_TCHAR) -> TSK_IMG_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_img_type_toname(arg1: TSK_IMG_TYPE_ENUM) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tsk_img_type_todesc(arg1: TSK_IMG_TYPE_ENUM) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tsk_img_type_supported() -> TSK_IMG_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_img_type_print(arg1: *mut FILE);
}
#[doc = " Definition for callback function that vs_part_walk() calls for"]
#[doc = " each partition that it walks."]
#[doc = ""]
#[doc = " @param a_vs Pointer to volume system being analyzed"]
#[doc = " @param a_vs_part Pointer to current partition in the walk"]
#[doc = " @param a_ptr Pointer that was passed to vs_part_walk by caller"]
#[doc = " @return Status on whether the vs_part_walk() function should"]
#[doc = " continue, stop, or error."]
pub type TSK_VS_PART_WALK_CB = ::std::option::Option<
    unsafe extern "C" fn(
        a_vs: *mut TSK_VS_INFO,
        a_vs_part: *const TSK_VS_PART_INFO,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> TSK_WALK_RET_ENUM,
>;
#[doc = "< Use autodetection methods"]
pub const TSK_VS_TYPE_ENUM_TSK_VS_TYPE_DETECT: TSK_VS_TYPE_ENUM = 0;
#[doc = "< DOS Partition table"]
pub const TSK_VS_TYPE_ENUM_TSK_VS_TYPE_DOS: TSK_VS_TYPE_ENUM = 1;
#[doc = "< BSD Partition table"]
pub const TSK_VS_TYPE_ENUM_TSK_VS_TYPE_BSD: TSK_VS_TYPE_ENUM = 2;
#[doc = "< Sun VTOC"]
pub const TSK_VS_TYPE_ENUM_TSK_VS_TYPE_SUN: TSK_VS_TYPE_ENUM = 4;
#[doc = "< Mac partition table"]
pub const TSK_VS_TYPE_ENUM_TSK_VS_TYPE_MAC: TSK_VS_TYPE_ENUM = 8;
#[doc = "< GPT partition table"]
pub const TSK_VS_TYPE_ENUM_TSK_VS_TYPE_GPT: TSK_VS_TYPE_ENUM = 16;
#[doc = "< APFS"]
pub const TSK_VS_TYPE_ENUM_TSK_VS_TYPE_APFS: TSK_VS_TYPE_ENUM = 32;
#[doc = "< fake partition table type for loaddb (for images that do not have a volume system)"]
pub const TSK_VS_TYPE_ENUM_TSK_VS_TYPE_DBFILLER: TSK_VS_TYPE_ENUM = 240;
#[doc = "< Unsupported"]
pub const TSK_VS_TYPE_ENUM_TSK_VS_TYPE_UNSUPP: TSK_VS_TYPE_ENUM = 65535;
#[doc = " Flags for the partition type."]
pub type TSK_VS_TYPE_ENUM = u32;
#[doc = " Data structure used to store state and basic information"]
#[doc = " for open volume systems."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_VS_INFO {
    #[doc = "< \\internal Will be set to TSK_VS_INFO_TAG if structure is still allocated, 0 if not"]
    pub tag: ::std::os::raw::c_int,
    #[doc = "< Pointer to disk image that VS is in"]
    pub img_info: *mut TSK_IMG_INFO,
    #[doc = "< Type of volume system / media management"]
    pub vstype: TSK_VS_TYPE_ENUM,
    #[doc = "< 1 if the partition table found was a backup"]
    pub is_backup: ::std::os::raw::c_int,
    #[doc = "< Byte offset where VS starts in disk image"]
    pub offset: TSK_DADDR_T,
    #[doc = "< Size of blocks in bytes"]
    pub block_size: ::std::os::raw::c_uint,
    #[doc = "< Endian ordering of data"]
    pub endian: TSK_ENDIAN_ENUM,
    #[doc = "< Linked list of partitions"]
    pub part_list: *mut TSK_VS_PART_INFO,
    #[doc = "< number of partitions"]
    pub part_count: TSK_PNUM_T,
    #[doc = "< \\internal Progs should call tsk_vs_close()."]
    pub close: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_VS_INFO)>,
}
#[test]
fn bindgen_test_layout_TSK_VS_INFO() {
    assert_eq!(
        ::std::mem::size_of::<TSK_VS_INFO>(),
        64usize,
        concat!("Size of: ", stringify!(TSK_VS_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_VS_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_VS_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_INFO>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_INFO),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_INFO>())).img_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_INFO),
            "::",
            stringify!(img_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_INFO>())).vstype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_INFO),
            "::",
            stringify!(vstype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_INFO>())).is_backup as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_INFO),
            "::",
            stringify!(is_backup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_INFO>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_INFO),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_INFO>())).block_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_INFO),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_INFO>())).endian as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_INFO),
            "::",
            stringify!(endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_INFO>())).part_list as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_INFO),
            "::",
            stringify!(part_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_INFO>())).part_count as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_INFO),
            "::",
            stringify!(part_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_INFO>())).close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_INFO),
            "::",
            stringify!(close)
        )
    );
}
#[doc = "< Sectors are allocated to a volume in the volume system"]
pub const TSK_VS_PART_FLAG_ENUM_TSK_VS_PART_FLAG_ALLOC: TSK_VS_PART_FLAG_ENUM = 1;
#[doc = "< Sectors are not allocated to a volume"]
pub const TSK_VS_PART_FLAG_ENUM_TSK_VS_PART_FLAG_UNALLOC: TSK_VS_PART_FLAG_ENUM = 2;
#[doc = "< Sectors contain volume system metadata and could also be ALLOC or UNALLOC"]
pub const TSK_VS_PART_FLAG_ENUM_TSK_VS_PART_FLAG_META: TSK_VS_PART_FLAG_ENUM = 4;
#[doc = "< Show all sectors in the walk."]
pub const TSK_VS_PART_FLAG_ENUM_TSK_VS_PART_FLAG_ALL: TSK_VS_PART_FLAG_ENUM = 7;
#[doc = " Flag values that describe the partitions in the VS.  Refer"]
#[doc = " to \\ref vs_open2 for more details."]
pub type TSK_VS_PART_FLAG_ENUM = u32;
#[doc = " Linked list entry that describes a volume in a generic way."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_VS_PART_INFO {
    pub tag: ::std::os::raw::c_int,
    #[doc = "< Pointer to previous partition (or NULL)"]
    pub prev: *mut TSK_VS_PART_INFO,
    #[doc = "< Pointer to next partition (or NULL)"]
    pub next: *mut TSK_VS_PART_INFO,
    #[doc = "< Pointer to parent volume system handle"]
    pub vs: *mut TSK_VS_INFO,
    #[doc = "< Sector offset of start of partition"]
    pub start: TSK_DADDR_T,
    #[doc = "< Number of sectors in partition"]
    pub len: TSK_DADDR_T,
    #[doc = "< UTF-8 description of partition (volume system type-specific)"]
    pub desc: *mut ::std::os::raw::c_char,
    #[doc = "< Table address that describes this partition"]
    pub table_num: i8,
    #[doc = "< Entry in the table that describes this partition"]
    pub slot_num: i8,
    #[doc = "< Address of this partition"]
    pub addr: TSK_PNUM_T,
    #[doc = "< Flags for partition"]
    pub flags: TSK_VS_PART_FLAG_ENUM,
}
#[test]
fn bindgen_test_layout_TSK_VS_PART_INFO() {
    assert_eq!(
        ::std::mem::size_of::<TSK_VS_PART_INFO>(),
        72usize,
        concat!("Size of: ", stringify!(TSK_VS_PART_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_VS_PART_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_VS_PART_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).vs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(vs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).start as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).desc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).table_num as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(table_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).slot_num as *const _ as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(slot_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).addr as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_VS_PART_INFO>())).flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_VS_PART_INFO),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn tsk_vs_type_toid(arg1: *const TSK_TCHAR) -> TSK_VS_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_vs_type_toid_utf8(arg1: *const ::std::os::raw::c_char) -> TSK_VS_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_vs_type_toname(arg1: TSK_VS_TYPE_ENUM) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tsk_vs_type_todesc(arg1: TSK_VS_TYPE_ENUM) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tsk_vs_type_supported() -> TSK_VS_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_vs_type_print(arg1: *mut FILE);
}
extern "C" {
    pub fn tsk_vs_open(
        arg1: *mut TSK_IMG_INFO,
        arg2: TSK_DADDR_T,
        arg3: TSK_VS_TYPE_ENUM,
    ) -> *mut TSK_VS_INFO;
}
extern "C" {
    pub fn tsk_vs_close(arg1: *mut TSK_VS_INFO);
}
extern "C" {
    pub fn tsk_vs_read_block(
        a_vs: *mut TSK_VS_INFO,
        a_addr: TSK_DADDR_T,
        buf: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn tsk_vs_part_get(arg1: *const TSK_VS_INFO, idx: TSK_PNUM_T) -> *const TSK_VS_PART_INFO;
}
extern "C" {
    pub fn tsk_vs_part_walk(
        vs: *mut TSK_VS_INFO,
        start: TSK_PNUM_T,
        last: TSK_PNUM_T,
        flags: TSK_VS_PART_FLAG_ENUM,
        action: TSK_VS_PART_WALK_CB,
        ptr: *mut ::std::os::raw::c_void,
    ) -> u8;
}
extern "C" {
    pub fn tsk_vs_part_read(
        a_vs_part: *const TSK_VS_PART_INFO,
        a_off: TSK_OFF_T,
        buf: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn tsk_vs_part_read_block(
        a_vs_part: *const TSK_VS_PART_INFO,
        a_addr: TSK_DADDR_T,
        buf: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> ssize_t;
}
pub type TSK_POOL_INFO = _TSK_POOL_INFO;
#[doc = "< Used to show that TSK_FS_BLOCK structure has no data in it"]
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_UNUSED: TSK_FS_BLOCK_FLAG_ENUM = 0;
#[doc = "< Block is allocated (and not TSK_FS_BLOCK_FLAG_UNALLOC)"]
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_ALLOC: TSK_FS_BLOCK_FLAG_ENUM = 1;
#[doc = "< Block is unallocated (and not TSK_FS_BLOCK_FLAG_ALLOC)"]
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_UNALLOC: TSK_FS_BLOCK_FLAG_ENUM = 2;
#[doc = "< Block (could) contain file content (and not TSK_FS_BLOCK_FLAG_META)"]
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_CONT: TSK_FS_BLOCK_FLAG_ENUM = 4;
#[doc = "< Block (could) contain file system metadata (and not TSK_FS_BLOCK_FLAG_CONT)"]
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_META: TSK_FS_BLOCK_FLAG_ENUM = 8;
#[doc = "< Block has been marked as bad by the file system"]
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_BAD: TSK_FS_BLOCK_FLAG_ENUM = 16;
#[doc = "< The data has been read raw from the disk (and not COMP or SPARSE)"]
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_RAW: TSK_FS_BLOCK_FLAG_ENUM = 32;
#[doc = "< The data passed in the file_walk callback was stored as sparse (all zeros) (and not RAW or COMP)"]
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_SPARSE: TSK_FS_BLOCK_FLAG_ENUM = 64;
#[doc = "< The data passed in the file_walk callback was stored in a compressed form (and not RAW or SPARSE)"]
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_COMP: TSK_FS_BLOCK_FLAG_ENUM = 128;
#[doc = "< The data passed in the file_walk callback is from an NTFS resident file"]
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_RES: TSK_FS_BLOCK_FLAG_ENUM = 256;
pub const TSK_FS_BLOCK_FLAG_ENUM_TSK_FS_BLOCK_FLAG_AONLY: TSK_FS_BLOCK_FLAG_ENUM = 512;
#[doc = " Flags that are used in TSK_FS_BLOCK and in callback of file_walk."]
#[doc = " Note that some of these are dependent. A block can be either TSK_FS_BLOCK_FLAG_ALLOC"]
#[doc = " or TSK_FS_BLOCK_FLAG_UNALLOC.  It can be one of TSK_FS_BLOCK_FLAG_RAW, TSK_FS_BLOCK_FLAG_BAD,"]
#[doc = " TSK_FS_BLOCK_FLAG_RES, TSK_FS_BLOCK_FLAG_SPARSE, or TSK_FS_BLOCK_FLAG_COMP.  Note that some of"]
#[doc = " these are set only by file_walk because they are file-level details, such as compression and sparse."]
pub type TSK_FS_BLOCK_FLAG_ENUM = u32;
#[doc = "< No Flags"]
pub const TSK_FS_BLOCK_WALK_FLAG_ENUM_TSK_FS_BLOCK_WALK_FLAG_NONE: TSK_FS_BLOCK_WALK_FLAG_ENUM = 0;
#[doc = "< Allocated blocks"]
pub const TSK_FS_BLOCK_WALK_FLAG_ENUM_TSK_FS_BLOCK_WALK_FLAG_ALLOC: TSK_FS_BLOCK_WALK_FLAG_ENUM = 1;
#[doc = "< Unallocated blocks"]
pub const TSK_FS_BLOCK_WALK_FLAG_ENUM_TSK_FS_BLOCK_WALK_FLAG_UNALLOC: TSK_FS_BLOCK_WALK_FLAG_ENUM =
    2;
#[doc = "< Blocks that could store file content"]
pub const TSK_FS_BLOCK_WALK_FLAG_ENUM_TSK_FS_BLOCK_WALK_FLAG_CONT: TSK_FS_BLOCK_WALK_FLAG_ENUM = 4;
#[doc = "< Blocks that could store file system metadata"]
pub const TSK_FS_BLOCK_WALK_FLAG_ENUM_TSK_FS_BLOCK_WALK_FLAG_META: TSK_FS_BLOCK_WALK_FLAG_ENUM = 8;
#[doc = "< Do not include content in callback only address and allocation status"]
pub const TSK_FS_BLOCK_WALK_FLAG_ENUM_TSK_FS_BLOCK_WALK_FLAG_AONLY: TSK_FS_BLOCK_WALK_FLAG_ENUM =
    16;
#[doc = " Flags that are used to specify which blocks to call the tsk_fs_block_walk() callback function with."]
pub type TSK_FS_BLOCK_WALK_FLAG_ENUM = u32;
#[doc = " Generic data structure to hold block data with metadata"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_BLOCK {
    #[doc = "< \\internal Will be set to TSK_FS_BLOCK_TAG if structure is valid / allocated"]
    pub tag: ::std::os::raw::c_int,
    #[doc = "< Pointer to file system that block is from"]
    pub fs_info: *mut TSK_FS_INFO,
    #[doc = "< Buffer with block data (of size TSK_FS_INFO::block_size)"]
    pub buf: *mut ::std::os::raw::c_char,
    #[doc = "< Address of block"]
    pub addr: TSK_DADDR_T,
    pub flags: TSK_FS_BLOCK_FLAG_ENUM,
}
#[test]
fn bindgen_test_layout_TSK_FS_BLOCK() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_BLOCK>(),
        40usize,
        concat!("Size of: ", stringify!(TSK_FS_BLOCK))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_BLOCK>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_BLOCK))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_BLOCK>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_BLOCK),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_BLOCK>())).fs_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_BLOCK),
            "::",
            stringify!(fs_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_BLOCK>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_BLOCK),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_BLOCK>())).addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_BLOCK),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_BLOCK>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_BLOCK),
            "::",
            stringify!(flags)
        )
    );
}
#[doc = " Function definition used for callback to tsk_fs_block_walk()."]
#[doc = ""]
#[doc = " @param a_block Pointer to block structure that holds block content and flags"]
#[doc = " @param a_ptr Pointer that was supplied by the caller who called tsk_fs_block_walk"]
#[doc = " @returns Value to identify if walk should continue, stop, or stop because of error"]
pub type TSK_FS_BLOCK_WALK_CB = ::std::option::Option<
    unsafe extern "C" fn(
        a_block: *const TSK_FS_BLOCK,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> TSK_WALK_RET_ENUM,
>;
extern "C" {
    pub fn tsk_fs_block_free(a_fs_block: *mut TSK_FS_BLOCK);
}
extern "C" {
    pub fn tsk_fs_block_get(
        fs: *mut TSK_FS_INFO,
        fs_block: *mut TSK_FS_BLOCK,
        addr: TSK_DADDR_T,
    ) -> *mut TSK_FS_BLOCK;
}
extern "C" {
    pub fn tsk_fs_block_get_flag(
        a_fs: *mut TSK_FS_INFO,
        a_fs_block: *mut TSK_FS_BLOCK,
        a_addr: TSK_DADDR_T,
        a_flags: TSK_FS_BLOCK_FLAG_ENUM,
    ) -> *mut TSK_FS_BLOCK;
}
extern "C" {
    pub fn tsk_fs_block_walk(
        a_fs: *mut TSK_FS_INFO,
        a_start_blk: TSK_DADDR_T,
        a_end_blk: TSK_DADDR_T,
        a_flags: TSK_FS_BLOCK_WALK_FLAG_ENUM,
        a_action: TSK_FS_BLOCK_WALK_CB,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> u8;
}
#[doc = "< No Flag"]
pub const TSK_FS_ATTR_RUN_FLAG_ENUM_TSK_FS_ATTR_RUN_FLAG_NONE: TSK_FS_ATTR_RUN_FLAG_ENUM = 0;
#[doc = "< Entry is a filler for a run that has not been seen yet in the processing (or has been lost)"]
pub const TSK_FS_ATTR_RUN_FLAG_ENUM_TSK_FS_ATTR_RUN_FLAG_FILLER: TSK_FS_ATTR_RUN_FLAG_ENUM = 1;
#[doc = "< Entry is a sparse run where all data in the run is zeros"]
pub const TSK_FS_ATTR_RUN_FLAG_ENUM_TSK_FS_ATTR_RUN_FLAG_SPARSE: TSK_FS_ATTR_RUN_FLAG_ENUM = 2;
#[doc = "< Entry is arun where the data is encrypted"]
pub const TSK_FS_ATTR_RUN_FLAG_ENUM_TSK_FS_ATTR_RUN_FLAG_ENCRYPTED: TSK_FS_ATTR_RUN_FLAG_ENUM = 4;
#[doc = " Flags used for a TSK_FS_ATTR_RUN entry."]
pub type TSK_FS_ATTR_RUN_FLAG_ENUM = u32;
#[doc = " Holds information about a single data run, which has a starting address and length."]
#[doc = " A run describes a consecutive list of blocks that have been allocated to a file."]
#[doc = " A file may have many such runs and they are stringed together in a linked list."]
#[doc = " The entries in the list must be stored in sequential order (based on offset in file)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_ATTR_RUN {
    #[doc = "< Pointer to the next run in the attribute (or NULL)"]
    pub next: *mut TSK_FS_ATTR_RUN,
    #[doc = "< Offset (in blocks) of this run in the file"]
    pub offset: TSK_DADDR_T,
    #[doc = "< Starting block address (in file system) of run"]
    pub addr: TSK_DADDR_T,
    #[doc = "< Number of blocks in run (0 when entry is not in use)"]
    pub len: TSK_DADDR_T,
    #[doc = "< Starting block number used for XTS encryption IV"]
    pub crypto_id: TSK_DADDR_T,
    #[doc = "< Flags for run"]
    pub flags: TSK_FS_ATTR_RUN_FLAG_ENUM,
}
#[test]
fn bindgen_test_layout_TSK_FS_ATTR_RUN() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_ATTR_RUN>(),
        48usize,
        concat!("Size of: ", stringify!(TSK_FS_ATTR_RUN))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_ATTR_RUN>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_ATTR_RUN))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR_RUN>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR_RUN),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR_RUN>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR_RUN),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR_RUN>())).addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR_RUN),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR_RUN>())).len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR_RUN),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR_RUN>())).crypto_id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR_RUN),
            "::",
            stringify!(crypto_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR_RUN>())).flags as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR_RUN),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn tsk_fs_attr_run_free(arg1: *mut TSK_FS_ATTR_RUN);
}
#[doc = "< No Flag"]
pub const TSK_FS_ATTR_FLAG_ENUM_TSK_FS_ATTR_FLAG_NONE: TSK_FS_ATTR_FLAG_ENUM = 0;
#[doc = "< data structure is in use"]
pub const TSK_FS_ATTR_FLAG_ENUM_TSK_FS_ATTR_INUSE: TSK_FS_ATTR_FLAG_ENUM = 1;
#[doc = "< Contains non-resident data (i.e. located in blocks)"]
pub const TSK_FS_ATTR_FLAG_ENUM_TSK_FS_ATTR_NONRES: TSK_FS_ATTR_FLAG_ENUM = 2;
#[doc = "< Contains resident data (i.e. in a small buffer)"]
pub const TSK_FS_ATTR_FLAG_ENUM_TSK_FS_ATTR_RES: TSK_FS_ATTR_FLAG_ENUM = 4;
#[doc = "< Contains encrypted data"]
pub const TSK_FS_ATTR_FLAG_ENUM_TSK_FS_ATTR_ENC: TSK_FS_ATTR_FLAG_ENUM = 16;
#[doc = "< Contains compressed data"]
pub const TSK_FS_ATTR_FLAG_ENUM_TSK_FS_ATTR_COMP: TSK_FS_ATTR_FLAG_ENUM = 32;
#[doc = "< Contains sparse data"]
pub const TSK_FS_ATTR_FLAG_ENUM_TSK_FS_ATTR_SPARSE: TSK_FS_ATTR_FLAG_ENUM = 64;
#[doc = "< Data was determined in file recovery mode"]
pub const TSK_FS_ATTR_FLAG_ENUM_TSK_FS_ATTR_RECOVERY: TSK_FS_ATTR_FLAG_ENUM = 128;
#[doc = " Flags used for the TSK_FS_ATTR structure, which is used to"]
#[doc = " store file content metadata."]
pub type TSK_FS_ATTR_FLAG_ENUM = u32;
#[doc = " File walk callback function definition.  This is called for"]
#[doc = " chunks of content in the file being processed."]
#[doc = " @param a_fs_file Pointer to file being processed"]
#[doc = " @param a_off Byte offset in file that this data is for"]
#[doc = " @param a_addr Address of data being passed (valid only if a_flags have RAW set)"]
#[doc = " @param a_buf Pointer to buffer with file content"]
#[doc = " @param a_len Size of data in buffer (in bytes)"]
#[doc = " @param a_flags Flags about the file content"]
#[doc = " @param a_ptr Pointer that was specified by caller to inode_walk"]
#[doc = " @returns Value that tells file walk to continue or stop"]
pub type TSK_FS_FILE_WALK_CB = ::std::option::Option<
    unsafe extern "C" fn(
        a_fs_file: *mut TSK_FS_FILE,
        a_off: TSK_OFF_T,
        a_addr: TSK_DADDR_T,
        a_buf: *mut ::std::os::raw::c_char,
        a_len: size_t,
        a_flags: TSK_FS_BLOCK_FLAG_ENUM,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> TSK_WALK_RET_ENUM,
>;
#[doc = "< No Flag"]
pub const TSK_FS_FILE_WALK_FLAG_ENUM_TSK_FS_FILE_WALK_FLAG_NONE: TSK_FS_FILE_WALK_FLAG_ENUM = 0;
#[doc = "< Include the file's slack space in the callback."]
pub const TSK_FS_FILE_WALK_FLAG_ENUM_TSK_FS_FILE_WALK_FLAG_SLACK: TSK_FS_FILE_WALK_FLAG_ENUM = 1;
#[doc = "< Ignore the Id argument given in the API (use only the type)"]
pub const TSK_FS_FILE_WALK_FLAG_ENUM_TSK_FS_FILE_WALK_FLAG_NOID: TSK_FS_FILE_WALK_FLAG_ENUM = 2;
#[doc = "< Provide callback with only addresses and no file content."]
pub const TSK_FS_FILE_WALK_FLAG_ENUM_TSK_FS_FILE_WALK_FLAG_AONLY: TSK_FS_FILE_WALK_FLAG_ENUM = 4;
#[doc = "< Do not include sparse blocks in the callback."]
pub const TSK_FS_FILE_WALK_FLAG_ENUM_TSK_FS_FILE_WALK_FLAG_NOSPARSE: TSK_FS_FILE_WALK_FLAG_ENUM = 8;
#[doc = " Flags used by tsk_fs_file_walk to determine when the callback function should"]
#[doc = " be used."]
pub type TSK_FS_FILE_WALK_FLAG_ENUM = u32;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NOT_FOUND: TSK_FS_ATTR_TYPE_ENUM = 0;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_DEFAULT: TSK_FS_ATTR_TYPE_ENUM = 1;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_SI: TSK_FS_ATTR_TYPE_ENUM = 16;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_ATTRLIST: TSK_FS_ATTR_TYPE_ENUM = 32;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_FNAME: TSK_FS_ATTR_TYPE_ENUM = 48;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_VVER: TSK_FS_ATTR_TYPE_ENUM = 64;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_OBJID: TSK_FS_ATTR_TYPE_ENUM = 64;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_SEC: TSK_FS_ATTR_TYPE_ENUM = 80;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_VNAME: TSK_FS_ATTR_TYPE_ENUM = 96;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_VINFO: TSK_FS_ATTR_TYPE_ENUM = 112;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_DATA: TSK_FS_ATTR_TYPE_ENUM = 128;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_IDXROOT: TSK_FS_ATTR_TYPE_ENUM = 144;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_IDXALLOC: TSK_FS_ATTR_TYPE_ENUM = 160;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_BITMAP: TSK_FS_ATTR_TYPE_ENUM = 176;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_SYMLNK: TSK_FS_ATTR_TYPE_ENUM = 192;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_REPARSE: TSK_FS_ATTR_TYPE_ENUM = 192;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_EAINFO: TSK_FS_ATTR_TYPE_ENUM = 208;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_EA: TSK_FS_ATTR_TYPE_ENUM = 224;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_PROP: TSK_FS_ATTR_TYPE_ENUM = 240;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_NTFS_LOG: TSK_FS_ATTR_TYPE_ENUM = 256;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_UNIX_INDIR: TSK_FS_ATTR_TYPE_ENUM = 4097;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_UNIX_EXTENT: TSK_FS_ATTR_TYPE_ENUM = 4098;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_HFS_DEFAULT: TSK_FS_ATTR_TYPE_ENUM = 1;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_HFS_DATA: TSK_FS_ATTR_TYPE_ENUM = 4352;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_HFS_RSRC: TSK_FS_ATTR_TYPE_ENUM = 4353;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_HFS_EXT_ATTR: TSK_FS_ATTR_TYPE_ENUM = 4354;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_HFS_COMP_REC: TSK_FS_ATTR_TYPE_ENUM = 4355;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_APFS_DATA: TSK_FS_ATTR_TYPE_ENUM = 4352;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_APFS_RSRC: TSK_FS_ATTR_TYPE_ENUM = 4353;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_APFS_EXT_ATTR: TSK_FS_ATTR_TYPE_ENUM = 4354;
pub const TSK_FS_ATTR_TYPE_ENUM_TSK_FS_ATTR_TYPE_APFS_COMP_REC: TSK_FS_ATTR_TYPE_ENUM = 4355;
#[doc = " These are based on the NTFS type values."]
#[doc = " Added types for HFS+."]
#[doc = " NOTE: Update bindings/java/src/org/sleuthkit/datamodel/TskData.java"]
#[doc = " with any changes."]
pub type TSK_FS_ATTR_TYPE_ENUM = u32;
#[doc = " Holds information about the location of file content (or a file attribute). For most file systems, a file"]
#[doc = " has only a single attribute that stores the file content."]
#[doc = " Other file systems, such as NTFS, have multiple"]
#[doc = " attributes.  If multiple attributes exist, they are stored in a linked list."]
#[doc = " Attributes can be \"resident\", which means the data is stored"]
#[doc = " in a small buffer instead of being stored in a full file system block."]
#[doc = " \"Non-resident\" attributes store data in blocks and they are stored in"]
#[doc = " the data structure as a series of runs."]
#[doc = " This structure is used to represent both of these cases."]
#[doc = ""]
#[doc = " The non-resident data has several size values."]
#[doc = " \\verbatim"]
#[doc = " |--------------------------------------------------------------------|"]
#[doc = " |skiplen|---------------allocsize------------------------------------|"]
#[doc = " |skiplen|---------------size-----------------------------------|"]
#[doc = " |skiplen|---------------initsize------------|"]
#[doc = " \\endverbatim"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_ATTR {
    #[doc = "< Pointer to next attribute in list"]
    pub next: *mut TSK_FS_ATTR,
    #[doc = "< Pointer to the file that this is from"]
    pub fs_file: *mut TSK_FS_FILE,
    #[doc = "< Flags for attribute"]
    pub flags: TSK_FS_ATTR_FLAG_ENUM,
    #[doc = "< Name of attribute (in UTF-8).  Will be NULL if attribute doesn't have a name."]
    pub name: *mut ::std::os::raw::c_char,
    #[doc = "< Number of bytes allocated to name"]
    pub name_size: size_t,
    #[doc = "< Type of attribute"]
    pub type_: TSK_FS_ATTR_TYPE_ENUM,
    #[doc = "< Id of attribute"]
    pub id: u16,
    #[doc = "< Size in bytes of the attribute resident and non-resident content (does not include skiplen for non-resident attributes)"]
    pub size: TSK_OFF_T,
    pub nrd: TSK_FS_ATTR__bindgen_ty_1,
    pub rd: TSK_FS_ATTR__bindgen_ty_2,
    pub r: ::std::option::Option<
        unsafe extern "C" fn(
            fs_attr: *const TSK_FS_ATTR,
            a_offset: TSK_OFF_T,
            a_buf: *mut ::std::os::raw::c_char,
            a_len: size_t,
        ) -> ssize_t,
    >,
    pub w: ::std::option::Option<
        unsafe extern "C" fn(
            fs_attr: *const TSK_FS_ATTR,
            flags: ::std::os::raw::c_int,
            arg1: TSK_FS_FILE_WALK_CB,
            arg2: *mut ::std::os::raw::c_void,
        ) -> u8,
    >,
}
#[doc = " Data associated with a non-resident file / attribute."]
#[doc = " The data is stored in one or more data runs."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_ATTR__bindgen_ty_1 {
    #[doc = "< Linked list of runs for non-resident attributes"]
    pub run: *mut TSK_FS_ATTR_RUN,
    #[doc = "< Pointer to final run in the list"]
    pub run_end: *mut TSK_FS_ATTR_RUN,
    #[doc = "< Number of initial bytes in run to skip before content begins. The size field does not include this length."]
    pub skiplen: u32,
    #[doc = "< Number of bytes that are allocated in all clusters of non-resident run (will be larger than size - does not include skiplen).  This is defined when the attribute is created and used to determine slack space."]
    pub allocsize: TSK_OFF_T,
    #[doc = "< Number of bytes (starting from offset 0) that have data (including FILLER) saved for them (smaller then or equal to size).  This is defined when the attribute is created."]
    pub initsize: TSK_OFF_T,
    #[doc = "< Size of compression units (needed only if NTFS file is compressed)"]
    pub compsize: u32,
}
#[test]
fn bindgen_test_layout_TSK_FS_ATTR__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_ATTR__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(TSK_FS_ATTR__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_ATTR__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_ATTR__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR__bindgen_ty_1>())).run as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR__bindgen_ty_1),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_ATTR__bindgen_ty_1>())).run_end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR__bindgen_ty_1),
            "::",
            stringify!(run_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_ATTR__bindgen_ty_1>())).skiplen as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR__bindgen_ty_1),
            "::",
            stringify!(skiplen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_ATTR__bindgen_ty_1>())).allocsize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR__bindgen_ty_1),
            "::",
            stringify!(allocsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_ATTR__bindgen_ty_1>())).initsize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR__bindgen_ty_1),
            "::",
            stringify!(initsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_ATTR__bindgen_ty_1>())).compsize as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR__bindgen_ty_1),
            "::",
            stringify!(compsize)
        )
    );
}
#[doc = " Data associated with a resident attribute / file."]
#[doc = " The data is stored in a buffer."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_ATTR__bindgen_ty_2 {
    #[doc = "< Buffer for resident data"]
    pub buf: *mut u8,
    #[doc = "< Number of bytes allocated to buf"]
    pub buf_size: size_t,
    #[doc = "< Starting offset in bytes relative to start of file system (NOT YET IMPLEMENTED)"]
    pub offset: TSK_OFF_T,
}
#[test]
fn bindgen_test_layout_TSK_FS_ATTR__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_ATTR__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(TSK_FS_ATTR__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_ATTR__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_ATTR__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR__bindgen_ty_2>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR__bindgen_ty_2),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_ATTR__bindgen_ty_2>())).buf_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR__bindgen_ty_2),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_ATTR__bindgen_ty_2>())).offset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR__bindgen_ty_2),
            "::",
            stringify!(offset)
        )
    );
}
#[test]
fn bindgen_test_layout_TSK_FS_ATTR() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_ATTR>(),
        144usize,
        concat!("Size of: ", stringify!(TSK_FS_ATTR))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_ATTR>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_ATTR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).fs_file as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(fs_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).name_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(name_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).type_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).id as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).nrd as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(nrd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).rd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(rd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).r as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTR>())).w as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTR),
            "::",
            stringify!(w)
        )
    );
}
#[doc = " Structure used as the head of an attribute list."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_ATTRLIST {
    pub head: *mut TSK_FS_ATTR,
}
#[test]
fn bindgen_test_layout_TSK_FS_ATTRLIST() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_ATTRLIST>(),
        8usize,
        concat!("Size of: ", stringify!(TSK_FS_ATTRLIST))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_ATTRLIST>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_ATTRLIST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_ATTRLIST>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_ATTRLIST),
            "::",
            stringify!(head)
        )
    );
}
extern "C" {
    pub fn tsk_fs_attr_walk(
        a_fs_attr: *const TSK_FS_ATTR,
        a_flags: TSK_FS_FILE_WALK_FLAG_ENUM,
        a_action: TSK_FS_FILE_WALK_CB,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> u8;
}
#[doc = " Relatively generic structure to hold file names that are stored with"]
#[doc = " the file metadata.  Note that this is different from the"]
#[doc = " file name stored in the directory heirarchy, which is"]
#[doc = " part of the tsk_fs_name_... code.  This is currently"]
#[doc = " used for NTFS and FAT file systems only."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TSK_FS_META_NAME_LIST {
    #[doc = "< Pointer to next name (or NULL)"]
    pub next: *mut TSK_FS_META_NAME_LIST,
    #[doc = "< Name in UTF-8 (does not include parent directory name)"]
    pub name: [::std::os::raw::c_char; 512usize],
    #[doc = "< Inode address of parent directory (NTFS only)"]
    pub par_inode: TSK_INUM_T,
    #[doc = "< Sequence number of parent directory (NTFS only)"]
    pub par_seq: u32,
}
#[test]
fn bindgen_test_layout_TSK_FS_META_NAME_LIST() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_META_NAME_LIST>(),
        536usize,
        concat!("Size of: ", stringify!(TSK_FS_META_NAME_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_META_NAME_LIST>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_META_NAME_LIST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META_NAME_LIST>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META_NAME_LIST),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META_NAME_LIST>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META_NAME_LIST),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META_NAME_LIST>())).par_inode as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META_NAME_LIST),
            "::",
            stringify!(par_inode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META_NAME_LIST>())).par_seq as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META_NAME_LIST),
            "::",
            stringify!(par_seq)
        )
    );
}
#[doc = "< Metadata structure is currently in an allocated state"]
pub const TSK_FS_META_FLAG_ENUM_TSK_FS_META_FLAG_ALLOC: TSK_FS_META_FLAG_ENUM = 1;
#[doc = "< Metadata structure is currently in an unallocated state"]
pub const TSK_FS_META_FLAG_ENUM_TSK_FS_META_FLAG_UNALLOC: TSK_FS_META_FLAG_ENUM = 2;
#[doc = "< Metadata structure has been allocated at least once"]
pub const TSK_FS_META_FLAG_ENUM_TSK_FS_META_FLAG_USED: TSK_FS_META_FLAG_ENUM = 4;
#[doc = "< Metadata structure has never been allocated."]
pub const TSK_FS_META_FLAG_ENUM_TSK_FS_META_FLAG_UNUSED: TSK_FS_META_FLAG_ENUM = 8;
#[doc = "< The file contents are compressed."]
pub const TSK_FS_META_FLAG_ENUM_TSK_FS_META_FLAG_COMP: TSK_FS_META_FLAG_ENUM = 16;
#[doc = "< Return only metadata structures that have no file name pointing to the (inode_walk flag only)"]
pub const TSK_FS_META_FLAG_ENUM_TSK_FS_META_FLAG_ORPHAN: TSK_FS_META_FLAG_ENUM = 32;
#[doc = " Metadata flags used in TSK_FS_META.flags and in request to inode_walk"]
pub type TSK_FS_META_FLAG_ENUM = u32;
#[doc = "< The data in the attributes (if any) is not for this file"]
pub const TSK_FS_META_ATTR_FLAG_ENUM_TSK_FS_META_ATTR_EMPTY: TSK_FS_META_ATTR_FLAG_ENUM = 0;
#[doc = "< The data in the attributes are for this file"]
pub const TSK_FS_META_ATTR_FLAG_ENUM_TSK_FS_META_ATTR_STUDIED: TSK_FS_META_ATTR_FLAG_ENUM = 1;
#[doc = "< The attributes for this file could not be loaded"]
pub const TSK_FS_META_ATTR_FLAG_ENUM_TSK_FS_META_ATTR_ERROR: TSK_FS_META_ATTR_FLAG_ENUM = 2;
pub type TSK_FS_META_ATTR_FLAG_ENUM = u32;
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_UNDEF: TSK_FS_META_TYPE_ENUM = 0;
#[doc = "< Regular file"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_REG: TSK_FS_META_TYPE_ENUM = 1;
#[doc = "< Directory file"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_DIR: TSK_FS_META_TYPE_ENUM = 2;
#[doc = "< Named pipe (fifo)"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_FIFO: TSK_FS_META_TYPE_ENUM = 3;
#[doc = "< Character device"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_CHR: TSK_FS_META_TYPE_ENUM = 4;
#[doc = "< Block device"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_BLK: TSK_FS_META_TYPE_ENUM = 5;
#[doc = "< Symbolic link"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_LNK: TSK_FS_META_TYPE_ENUM = 6;
#[doc = "< SOLARIS ONLY"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_SHAD: TSK_FS_META_TYPE_ENUM = 7;
#[doc = "< UNIX domain socket"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_SOCK: TSK_FS_META_TYPE_ENUM = 8;
#[doc = "< Whiteout"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_WHT: TSK_FS_META_TYPE_ENUM = 9;
#[doc = "< \"Virtual File\" created by TSK for file system areas"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_VIRT: TSK_FS_META_TYPE_ENUM = 10;
#[doc = "< \"Virtual Directory\" created by TSK to hold data like orphan files"]
pub const TSK_FS_META_TYPE_ENUM_TSK_FS_META_TYPE_VIRT_DIR: TSK_FS_META_TYPE_ENUM = 11;
#[doc = " Values for the mode field -- which identifies the file type"]
#[doc = " and permissions."]
pub type TSK_FS_META_TYPE_ENUM = u32;
extern "C" {
    pub static mut tsk_fs_meta_type_str: [[::std::os::raw::c_char; 2usize]; 12usize];
}
#[doc = "< unspecified"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_UNSPECIFIED: TSK_FS_META_MODE_ENUM = 0;
#[doc = "< set user id on execution"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_ISUID: TSK_FS_META_MODE_ENUM = 2048;
#[doc = "< set group id on execution"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_ISGID: TSK_FS_META_MODE_ENUM = 1024;
#[doc = "< sticky bit"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_ISVTX: TSK_FS_META_MODE_ENUM = 512;
#[doc = "< R for owner"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_IRUSR: TSK_FS_META_MODE_ENUM = 256;
#[doc = "< W for owner"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_IWUSR: TSK_FS_META_MODE_ENUM = 128;
#[doc = "< X for owner"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_IXUSR: TSK_FS_META_MODE_ENUM = 64;
#[doc = "< R for group"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_IRGRP: TSK_FS_META_MODE_ENUM = 32;
#[doc = "< W for group"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_IWGRP: TSK_FS_META_MODE_ENUM = 16;
#[doc = "< X for group"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_IXGRP: TSK_FS_META_MODE_ENUM = 8;
#[doc = "< R for other"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_IROTH: TSK_FS_META_MODE_ENUM = 4;
#[doc = "< W for other"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_IWOTH: TSK_FS_META_MODE_ENUM = 2;
#[doc = "< X for other"]
pub const TSK_FS_META_MODE_ENUM_TSK_FS_META_MODE_IXOTH: TSK_FS_META_MODE_ENUM = 1;
pub type TSK_FS_META_MODE_ENUM = u32;
pub const TSK_FS_META_CONTENT_TYPE_ENUM_TSK_FS_META_CONTENT_TYPE_DEFAULT:
    TSK_FS_META_CONTENT_TYPE_ENUM = 0;
#[doc = "< Ext4 with extents instead of individual pointers"]
pub const TSK_FS_META_CONTENT_TYPE_ENUM_TSK_FS_META_CONTENT_TYPE_EXT4_EXTENTS:
    TSK_FS_META_CONTENT_TYPE_ENUM = 1;
pub type TSK_FS_META_CONTENT_TYPE_ENUM = u32;
#[doc = " TSK data structure to store general file and directory metadata."]
#[doc = " Note that the file in the file"]
#[doc = " system may have more metadata than is stored here."]
#[doc = " For performance reasons, the run list of the file content is not always known"]
#[doc = " when the file is loaded.  It may be loaded only when needed by the internal code."]
#[doc = " The TSK_FS_META::content_ptr pointer contains file system-specific data that will be"]
#[doc = " used to determine the full run. After it has been loaded, the TSK_FS_META::attr field"]
#[doc = " will contain that info."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TSK_FS_META {
    #[doc = "< \\internal Will be set to TSK_FS_META_TAG if structure is allocated"]
    pub tag: ::std::os::raw::c_int,
    #[doc = "< Flags for this file for its allocation status etc."]
    pub flags: TSK_FS_META_FLAG_ENUM,
    #[doc = "< Address of the meta data structure for this file"]
    pub addr: TSK_INUM_T,
    #[doc = "< File type"]
    pub type_: TSK_FS_META_TYPE_ENUM,
    #[doc = "< Unix-style permissions"]
    pub mode: TSK_FS_META_MODE_ENUM,
    #[doc = "< link count (number of file names pointing to this)"]
    pub nlink: ::std::os::raw::c_int,
    #[doc = "< file size (in bytes)"]
    pub size: TSK_OFF_T,
    #[doc = "< owner id"]
    pub uid: TSK_UID_T,
    #[doc = "< group id"]
    pub gid: TSK_GID_T,
    #[doc = "< last file content modification time (stored in number of seconds since Jan 1, 1970 UTC)"]
    pub mtime: time_t,
    #[doc = "< nano-second resolution in addition to m_time"]
    pub mtime_nano: u32,
    #[doc = "< last file content accessed time (stored in number of seconds since Jan 1, 1970 UTC)"]
    pub atime: time_t,
    #[doc = "< nano-second resolution in addition to a_time"]
    pub atime_nano: u32,
    #[doc = "< last file / metadata status change time (stored in number of seconds since Jan 1, 1970 UTC)"]
    pub ctime: time_t,
    #[doc = "< nano-second resolution in addition to c_time"]
    pub ctime_nano: u32,
    #[doc = "< Created time (stored in number of seconds since Jan 1, 1970 UTC)"]
    pub crtime: time_t,
    #[doc = "< nano-second resolution in addition to cr_time"]
    pub crtime_nano: u32,
    pub time2: TSK_FS_META__bindgen_ty_1,
    #[doc = "< Pointer to file system specific data that is used to store references to file content"]
    pub content_ptr: *mut ::std::os::raw::c_void,
    #[doc = "< size of content  buffer"]
    pub content_len: size_t,
    #[doc = "< File system-specific and describes type of data in content_ptr in case file systems have multiple ways of storing things."]
    pub content_type: TSK_FS_META_CONTENT_TYPE_ENUM,
    #[doc = "< \\internal Optional callback used for any internal cleanup needed before freeing content_ptr"]
    pub reset_content:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    #[doc = "< Sequence number for file (NTFS only, is incremented when entry is reallocated)"]
    pub seq: u32,
    #[doc = " Contains run data on the file content (specific locations where content is stored)."]
    #[doc = " Check attr_state to determine if data in here is valid because not all file systems"]
    #[doc = " load this data when a file is loaded.  It may not be loaded until needed by one"]
    #[doc = " of the APIs. Most file systems will have only one attribute, but NTFS will have several."]
    pub attr: *mut TSK_FS_ATTRLIST,
    #[doc = "< State of the data in the TSK_FS_META::attr structure"]
    pub attr_state: TSK_FS_META_ATTR_FLAG_ENUM,
    #[doc = "< Name of file stored in metadata (FATXX and NTFS Only)"]
    pub name2: *mut TSK_FS_META_NAME_LIST,
    #[doc = "< Name of target file if this is a symbolic link"]
    pub link: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TSK_FS_META__bindgen_ty_1 {
    pub ext2: TSK_FS_META__bindgen_ty_1__bindgen_ty_1,
    pub hfs: TSK_FS_META__bindgen_ty_1__bindgen_ty_2,
    pub ntfs: TSK_FS_META__bindgen_ty_1__bindgen_ty_3,
    _bindgen_union_align: [u64; 9usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_META__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "< Linux deletion time"]
    pub dtime: time_t,
    #[doc = "< nano-second resolution in addition to d_time"]
    pub dtime_nano: u32,
}
#[test]
fn bindgen_test_layout_TSK_FS_META__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_META__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_META__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_1>())).dtime as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dtime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_1>())).dtime_nano
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dtime_nano)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_META__bindgen_ty_1__bindgen_ty_2 {
    #[doc = "< HFS+ backup time"]
    pub bkup_time: time_t,
    #[doc = "< nano-second resolution in addition to bkup_time"]
    pub bkup_time_nano: u32,
}
#[test]
fn bindgen_test_layout_TSK_FS_META__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_META__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_META__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_2>())).bkup_time
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bkup_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_2>())).bkup_time_nano
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bkup_time_nano)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_META__bindgen_ty_1__bindgen_ty_3 {
    #[doc = "< NTFS Created time stored in FILE_NAME"]
    pub fn_crtime: time_t,
    #[doc = "< NTFS Created time stored in FILE_NAME in nano-second resolution"]
    pub fn_crtime_nano: time_t,
    #[doc = "< NTFS mod (content) stored in FILE_NAME"]
    pub fn_mtime: time_t,
    #[doc = "< NTFS mod time stored in FILE_NAME in nano-second resolution"]
    pub fn_mtime_nano: time_t,
    #[doc = "< NTFS access time stored in FILE_NAME"]
    pub fn_atime: time_t,
    #[doc = "< NTFS access time stored in FILE_NAME in nano-second resolution"]
    pub fn_atime_nano: time_t,
    #[doc = "< NTFS change (MFT Entry) time stored in FILE_NAME"]
    pub fn_ctime: time_t,
    #[doc = "< NTFS change (MFT Entry) time stored in FILE_NAME in nano-second resolution"]
    pub fn_ctime_nano: time_t,
    #[doc = "< Attribute ID used to populate FN times."]
    pub fn_id: u16,
}
#[test]
fn bindgen_test_layout_TSK_FS_META__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>())).fn_crtime
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fn_crtime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>())).fn_crtime_nano
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fn_crtime_nano)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>())).fn_mtime as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fn_mtime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>())).fn_mtime_nano
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fn_mtime_nano)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>())).fn_atime as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fn_atime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>())).fn_atime_nano
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fn_atime_nano)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>())).fn_ctime as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fn_ctime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>())).fn_ctime_nano
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fn_ctime_nano)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1__bindgen_ty_3>())).fn_id as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fn_id)
        )
    );
}
#[test]
fn bindgen_test_layout_TSK_FS_META__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_META__bindgen_ty_1>(),
        72usize,
        concat!("Size of: ", stringify!(TSK_FS_META__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_META__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_META__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1>())).ext2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1),
            "::",
            stringify!(ext2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1>())).hfs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1),
            "::",
            stringify!(hfs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META__bindgen_ty_1>())).ntfs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META__bindgen_ty_1),
            "::",
            stringify!(ntfs)
        )
    );
}
#[test]
fn bindgen_test_layout_TSK_FS_META() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_META>(),
        256usize,
        concat!("Size of: ", stringify!(TSK_FS_META))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_META>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_META))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).mode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).nlink as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).uid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).gid as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).mtime as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).mtime_nano as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(mtime_nano)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).atime as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).atime_nano as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(atime_nano)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).ctime as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).ctime_nano as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(ctime_nano)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).crtime as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(crtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).crtime_nano as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(crtime_nano)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).time2 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(time2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).content_ptr as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(content_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).content_len as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(content_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).content_type as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(content_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).reset_content as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(reset_content)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).seq as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).attr as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).attr_state as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(attr_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).name2 as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(name2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_META>())).link as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_META),
            "::",
            stringify!(link)
        )
    );
}
#[doc = " inode walk callback function definition.  This is called for every file"]
#[doc = " that meets the criteria specified when inode_walk was called."]
#[doc = " @param a_fs_file Pointer to the current file"]
#[doc = " @param a_ptr Pointer that was specified by caller to inode_walk"]
#[doc = " @returns Value that tells inode walk to continue or stop"]
pub type TSK_FS_META_WALK_CB = ::std::option::Option<
    unsafe extern "C" fn(
        a_fs_file: *mut TSK_FS_FILE,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> TSK_WALK_RET_ENUM,
>;
extern "C" {
    pub fn tsk_fs_meta_walk(
        a_fs: *mut TSK_FS_INFO,
        a_start: TSK_INUM_T,
        a_end: TSK_INUM_T,
        a_flags: TSK_FS_META_FLAG_ENUM,
        a_cb: TSK_FS_META_WALK_CB,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> u8;
}
extern "C" {
    pub fn tsk_fs_meta_make_ls(
        a_fs_meta: *const TSK_FS_META,
        a_buf: *mut ::std::os::raw::c_char,
        a_len: size_t,
    ) -> u8;
}
#[doc = "< Name is in an allocated state"]
pub const TSK_FS_NAME_FLAG_ENUM_TSK_FS_NAME_FLAG_ALLOC: TSK_FS_NAME_FLAG_ENUM = 1;
#[doc = "< Name is in an unallocated state"]
pub const TSK_FS_NAME_FLAG_ENUM_TSK_FS_NAME_FLAG_UNALLOC: TSK_FS_NAME_FLAG_ENUM = 2;
#[doc = " File name flags that are used when specifying the status of"]
#[doc = " a name in the TSK_FS_NAME structure"]
pub type TSK_FS_NAME_FLAG_ENUM = u32;
#[doc = "< Unknown type"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_UNDEF: TSK_FS_NAME_TYPE_ENUM = 0;
#[doc = "< Named pipe"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_FIFO: TSK_FS_NAME_TYPE_ENUM = 1;
#[doc = "< Character device"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_CHR: TSK_FS_NAME_TYPE_ENUM = 2;
#[doc = "< Directory"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_DIR: TSK_FS_NAME_TYPE_ENUM = 3;
#[doc = "< Block device"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_BLK: TSK_FS_NAME_TYPE_ENUM = 4;
#[doc = "< Regular file"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_REG: TSK_FS_NAME_TYPE_ENUM = 5;
#[doc = "< Symbolic link"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_LNK: TSK_FS_NAME_TYPE_ENUM = 6;
#[doc = "< Socket"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_SOCK: TSK_FS_NAME_TYPE_ENUM = 7;
#[doc = "< Shadow inode (solaris)"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_SHAD: TSK_FS_NAME_TYPE_ENUM = 8;
#[doc = "< Whiteout (openbsd)"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_WHT: TSK_FS_NAME_TYPE_ENUM = 9;
#[doc = "< Special (TSK added \"Virtual\" files)"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_VIRT: TSK_FS_NAME_TYPE_ENUM = 10;
#[doc = "< Special (TSK added \"Virtual\" directories)"]
pub const TSK_FS_NAME_TYPE_ENUM_TSK_FS_NAME_TYPE_VIRT_DIR: TSK_FS_NAME_TYPE_ENUM = 11;
#[doc = " File type values -- as specified in the directory entry structure."]
pub type TSK_FS_NAME_TYPE_ENUM = u32;
extern "C" {
    pub static mut tsk_fs_name_type_str: [[::std::os::raw::c_char; 2usize]; 12usize];
}
#[doc = " Generic structure to store the file name information that is stored in"]
#[doc = " a directory. Most file systems separate the file name from the metadata, but"]
#[doc = " some do not (such as FAT). This structure contains the name and address of the"]
#[doc = " metadata."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_NAME {
    #[doc = "< \\internal Set to TSK_FS_NAME_ID if allocated, 0 if not"]
    pub tag: ::std::os::raw::c_int,
    #[doc = "< The name of the file (in UTF-8)"]
    pub name: *mut ::std::os::raw::c_char,
    #[doc = "< The number of bytes allocated to name"]
    pub name_size: size_t,
    #[doc = "< The short name of the file or null (in UTF-8)"]
    pub shrt_name: *mut ::std::os::raw::c_char,
    #[doc = "< The number of bytes allocated to shrt_name"]
    pub shrt_name_size: size_t,
    #[doc = "< Address of the metadata structure that the name points to."]
    pub meta_addr: TSK_INUM_T,
    #[doc = "< Sequence number for metadata structure (NTFS only)"]
    pub meta_seq: u32,
    #[doc = "< Metadata address of parent directory (equal to meta_addr if this entry is for root directory)."]
    pub par_addr: TSK_INUM_T,
    #[doc = "< Sequence number for parent directory (NTFS only)"]
    pub par_seq: u32,
    #[doc = "< Time entry was added to a directory (APFS only)"]
    pub date_added: u64,
    #[doc = "< File type information (directory, file, etc.)"]
    pub type_: TSK_FS_NAME_TYPE_ENUM,
    #[doc = "< Flags that describe allocation status etc."]
    pub flags: TSK_FS_NAME_FLAG_ENUM,
}
#[test]
fn bindgen_test_layout_TSK_FS_NAME() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_NAME>(),
        88usize,
        concat!("Size of: ", stringify!(TSK_FS_NAME))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_NAME>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_NAME))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).name_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(name_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).shrt_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(shrt_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).shrt_name_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(shrt_name_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).meta_addr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(meta_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).meta_seq as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(meta_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).par_addr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(par_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).par_seq as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(par_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).date_added as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(date_added)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).type_ as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_NAME>())).flags as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_NAME),
            "::",
            stringify!(flags)
        )
    );
}
#[doc = " Definition of callback function that is used by tsk_fs_dir_walk().  This is"]
#[doc = " is called for each file in a directory."]
#[doc = " @param a_fs_file Pointer to the current file in the directory"]
#[doc = " @param a_path Path of the file"]
#[doc = " @param a_ptr Pointer that was originally passed by caller to tsk_fs_dir_walk."]
#[doc = " @returns Value to signal if tsk_fs_dir_walk should stop or continue."]
pub type TSK_FS_DIR_WALK_CB = ::std::option::Option<
    unsafe extern "C" fn(
        a_fs_file: *mut TSK_FS_FILE,
        a_path: *const ::std::os::raw::c_char,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> TSK_WALK_RET_ENUM,
>;
#[doc = " A handle to a directory so that its files can be individually accessed."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_DIR {
    #[doc = "< \\internal Will be set to TSK_FS_DIR_TAG if structure is still allocated, 0 if not"]
    pub tag: ::std::os::raw::c_int,
    #[doc = "< Pointer to the file structure for the directory."]
    pub fs_file: *mut TSK_FS_FILE,
    #[doc = "< Pointer to list of names in directory."]
    pub names: *mut TSK_FS_NAME,
    #[doc = "< Number of name structures in queue being used"]
    pub names_used: size_t,
    #[doc = "< Number of name structures that were allocated"]
    pub names_alloc: size_t,
    #[doc = "< Metadata address of this directory"]
    pub addr: TSK_INUM_T,
    #[doc = "< Metadata address sequence (NTFS Only)"]
    pub seq: u32,
    #[doc = "< Pointer to file system the directory is located in"]
    pub fs_info: *mut TSK_FS_INFO,
}
#[test]
fn bindgen_test_layout_TSK_FS_DIR() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_DIR>(),
        64usize,
        concat!("Size of: ", stringify!(TSK_FS_DIR))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_DIR>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_DIR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_DIR>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_DIR),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_DIR>())).fs_file as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_DIR),
            "::",
            stringify!(fs_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_DIR>())).names as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_DIR),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_DIR>())).names_used as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_DIR),
            "::",
            stringify!(names_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_DIR>())).names_alloc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_DIR),
            "::",
            stringify!(names_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_DIR>())).addr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_DIR),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_DIR>())).seq as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_DIR),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_DIR>())).fs_info as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_DIR),
            "::",
            stringify!(fs_info)
        )
    );
}
#[doc = "< No Flags"]
pub const TSK_FS_DIR_WALK_FLAG_ENUM_TSK_FS_DIR_WALK_FLAG_NONE: TSK_FS_DIR_WALK_FLAG_ENUM = 0;
#[doc = "< Return allocated names in callback"]
pub const TSK_FS_DIR_WALK_FLAG_ENUM_TSK_FS_DIR_WALK_FLAG_ALLOC: TSK_FS_DIR_WALK_FLAG_ENUM = 1;
#[doc = "< Return unallocated names in callback"]
pub const TSK_FS_DIR_WALK_FLAG_ENUM_TSK_FS_DIR_WALK_FLAG_UNALLOC: TSK_FS_DIR_WALK_FLAG_ENUM = 2;
#[doc = "< Recurse into sub-directories"]
pub const TSK_FS_DIR_WALK_FLAG_ENUM_TSK_FS_DIR_WALK_FLAG_RECURSE: TSK_FS_DIR_WALK_FLAG_ENUM = 4;
#[doc = "< Do not return (or recurse into) the special Orphan directory"]
pub const TSK_FS_DIR_WALK_FLAG_ENUM_TSK_FS_DIR_WALK_FLAG_NOORPHAN: TSK_FS_DIR_WALK_FLAG_ENUM = 8;
#[doc = " Flags that are used when walking names in directories.  These are used to identify"]
#[doc = " which files to call the callback function on."]
pub type TSK_FS_DIR_WALK_FLAG_ENUM = u32;
extern "C" {
    pub fn tsk_fs_dir_open_meta(a_fs: *mut TSK_FS_INFO, a_addr: TSK_INUM_T) -> *mut TSK_FS_DIR;
}
extern "C" {
    pub fn tsk_fs_dir_open(
        a_fs: *mut TSK_FS_INFO,
        a_dir: *const ::std::os::raw::c_char,
    ) -> *mut TSK_FS_DIR;
}
extern "C" {
    pub fn tsk_fs_dir_walk(
        a_fs: *mut TSK_FS_INFO,
        a_inode: TSK_INUM_T,
        a_flags: TSK_FS_DIR_WALK_FLAG_ENUM,
        a_action: TSK_FS_DIR_WALK_CB,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> u8;
}
extern "C" {
    pub fn tsk_fs_dir_getsize(arg1: *const TSK_FS_DIR) -> size_t;
}
extern "C" {
    pub fn tsk_fs_dir_get(arg1: *const TSK_FS_DIR, arg2: size_t) -> *mut TSK_FS_FILE;
}
extern "C" {
    pub fn tsk_fs_dir_get_name(a_fs_dir: *const TSK_FS_DIR, a_idx: size_t) -> *const TSK_FS_NAME;
}
extern "C" {
    pub fn tsk_fs_dir_close(arg1: *mut TSK_FS_DIR);
}
extern "C" {
    pub fn tsk_fs_path2inum(
        a_fs: *mut TSK_FS_INFO,
        a_path: *const ::std::os::raw::c_char,
        a_result: *mut TSK_INUM_T,
        a_fs_name: *mut TSK_FS_NAME,
    ) -> i8;
}
#[doc = " Generic structure used to refer to files in the file system.  A file will"]
#[doc = " typically have a name and metadata.  This structure holds that type of information."]
#[doc = " When deleted files are being processed, this structure may have the name defined"]
#[doc = " but not metadata because it no longer exists. Or, if you are calling meta_walk"]
#[doc = " and are not processing at the name level, then the name will not be defined."]
#[doc = " always check these to make sure they are not null before they are read."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_FILE {
    #[doc = "< \\internal Will be set to TSK_FS_FILE_TAG if structure is allocated"]
    pub tag: ::std::os::raw::c_int,
    #[doc = "< Pointer to name of file (or NULL if file was opened using metadata address)"]
    pub name: *mut TSK_FS_NAME,
    #[doc = "< Pointer to metadata of file (or NULL if name has invalid metadata address)"]
    pub meta: *mut TSK_FS_META,
    #[doc = "< Pointer to file system that the file is located in."]
    pub fs_info: *mut TSK_FS_INFO,
}
#[test]
fn bindgen_test_layout_TSK_FS_FILE() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_FILE>(),
        32usize,
        concat!("Size of: ", stringify!(TSK_FS_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_FILE>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_FILE),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_FILE>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_FILE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_FILE>())).meta as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_FILE),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_FILE>())).fs_info as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_FILE),
            "::",
            stringify!(fs_info)
        )
    );
}
#[doc = "< No Flags"]
pub const TSK_FS_FILE_READ_FLAG_ENUM_TSK_FS_FILE_READ_FLAG_NONE: TSK_FS_FILE_READ_FLAG_ENUM = 0;
#[doc = "< Allow read access into slack space"]
pub const TSK_FS_FILE_READ_FLAG_ENUM_TSK_FS_FILE_READ_FLAG_SLACK: TSK_FS_FILE_READ_FLAG_ENUM = 1;
#[doc = "< Ignore the Id argument given in the API (use only the type)"]
pub const TSK_FS_FILE_READ_FLAG_ENUM_TSK_FS_FILE_READ_FLAG_NOID: TSK_FS_FILE_READ_FLAG_ENUM = 2;
#[doc = " Flags used by tsk_fs_file_read"]
pub type TSK_FS_FILE_READ_FLAG_ENUM = u32;
extern "C" {
    pub fn tsk_fs_file_close(a_fs_file: *mut TSK_FS_FILE);
}
extern "C" {
    pub fn tsk_fs_file_open(
        a_fs: *mut TSK_FS_INFO,
        a_fs_file: *mut TSK_FS_FILE,
        a_path: *const ::std::os::raw::c_char,
    ) -> *mut TSK_FS_FILE;
}
extern "C" {
    pub fn tsk_fs_file_open_meta(
        fs: *mut TSK_FS_INFO,
        fs_file: *mut TSK_FS_FILE,
        addr: TSK_INUM_T,
    ) -> *mut TSK_FS_FILE;
}
extern "C" {
    pub fn tsk_fs_file_read(
        arg1: *mut TSK_FS_FILE,
        arg2: TSK_OFF_T,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
        arg5: TSK_FS_FILE_READ_FLAG_ENUM,
    ) -> ssize_t;
}
extern "C" {
    pub fn tsk_fs_file_read_type(
        arg1: *mut TSK_FS_FILE,
        arg2: TSK_FS_ATTR_TYPE_ENUM,
        arg3: u16,
        arg4: TSK_OFF_T,
        arg5: *mut ::std::os::raw::c_char,
        arg6: size_t,
        arg7: TSK_FS_FILE_READ_FLAG_ENUM,
    ) -> ssize_t;
}
extern "C" {
    pub fn tsk_fs_file_attr_get(a_fs_file: *mut TSK_FS_FILE) -> *const TSK_FS_ATTR;
}
extern "C" {
    pub fn tsk_fs_file_attr_getsize(a_fs_file: *mut TSK_FS_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tsk_fs_file_attr_get_idx(
        a_fs_file: *mut TSK_FS_FILE,
        a_idx: ::std::os::raw::c_int,
    ) -> *const TSK_FS_ATTR;
}
extern "C" {
    pub fn tsk_fs_file_attr_get_type(
        a_fs_file: *mut TSK_FS_FILE,
        arg1: TSK_FS_ATTR_TYPE_ENUM,
        arg2: u16,
        arg3: u8,
    ) -> *const TSK_FS_ATTR;
}
extern "C" {
    pub fn tsk_fs_file_attr_get_id(a_fs_file: *mut TSK_FS_FILE, arg1: u16) -> *const TSK_FS_ATTR;
}
extern "C" {
    pub fn tsk_fs_file_walk(
        a_fs_file: *mut TSK_FS_FILE,
        a_flags: TSK_FS_FILE_WALK_FLAG_ENUM,
        a_action: TSK_FS_FILE_WALK_CB,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> u8;
}
extern "C" {
    pub fn tsk_fs_file_walk_type(
        a_fs_file: *mut TSK_FS_FILE,
        a_type: TSK_FS_ATTR_TYPE_ENUM,
        a_id: u16,
        a_flags: TSK_FS_FILE_WALK_FLAG_ENUM,
        a_action: TSK_FS_FILE_WALK_CB,
        a_ptr: *mut ::std::os::raw::c_void,
    ) -> u8;
}
extern "C" {
    pub fn tsk_fs_attr_read(
        a_fs_attr: *const TSK_FS_ATTR,
        a_offset: TSK_OFF_T,
        a_buf: *mut ::std::os::raw::c_char,
        a_len: size_t,
        a_flags: TSK_FS_FILE_READ_FLAG_ENUM,
    ) -> ssize_t;
}
extern "C" {
    pub fn tsk_fs_file_get_owner_sid(
        arg1: *mut TSK_FS_FILE,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_HASH_RESULTS {
    pub flags: TSK_BASE_HASH_ENUM,
    pub md5_digest: [::std::os::raw::c_uchar; 16usize],
    pub sha1_digest: [::std::os::raw::c_uchar; 20usize],
}
#[test]
fn bindgen_test_layout_TSK_FS_HASH_RESULTS() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_HASH_RESULTS>(),
        40usize,
        concat!("Size of: ", stringify!(TSK_FS_HASH_RESULTS))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_HASH_RESULTS>(),
        4usize,
        concat!("Alignment of ", stringify!(TSK_FS_HASH_RESULTS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_HASH_RESULTS>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_HASH_RESULTS),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_HASH_RESULTS>())).md5_digest as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_HASH_RESULTS),
            "::",
            stringify!(md5_digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_HASH_RESULTS>())).sha1_digest as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_HASH_RESULTS),
            "::",
            stringify!(sha1_digest)
        )
    );
}
extern "C" {
    pub fn tsk_fs_file_hash_calc(
        arg1: *mut TSK_FS_FILE,
        arg2: *mut TSK_FS_HASH_RESULTS,
        arg3: TSK_BASE_HASH_ENUM,
    ) -> u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_JENTRY {
    pub jblk: TSK_DADDR_T,
    pub fsblk: TSK_DADDR_T,
}
#[test]
fn bindgen_test_layout_TSK_FS_JENTRY() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_JENTRY>(),
        16usize,
        concat!("Size of: ", stringify!(TSK_FS_JENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_JENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_JENTRY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_JENTRY>())).jblk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_JENTRY),
            "::",
            stringify!(jblk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_JENTRY>())).fsblk as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_JENTRY),
            "::",
            stringify!(fsblk)
        )
    );
}
pub type TSK_FS_JBLK_WALK_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TSK_FS_INFO,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> TSK_WALK_RET_ENUM,
>;
pub type TSK_FS_JENTRY_WALK_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TSK_FS_INFO,
        arg2: *mut TSK_FS_JENTRY,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> TSK_WALK_RET_ENUM,
>;
#[doc = "< Use autodetection methods"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_DETECT: TSK_FS_TYPE_ENUM = 0;
#[doc = "< NTFS file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_NTFS: TSK_FS_TYPE_ENUM = 1;
#[doc = "< NTFS auto detection"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_NTFS_DETECT: TSK_FS_TYPE_ENUM = 1;
#[doc = "< FAT12 file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_FAT12: TSK_FS_TYPE_ENUM = 2;
#[doc = "< FAT16 file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_FAT16: TSK_FS_TYPE_ENUM = 4;
#[doc = "< FAT32 file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_FAT32: TSK_FS_TYPE_ENUM = 8;
#[doc = "< exFAT file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_EXFAT: TSK_FS_TYPE_ENUM = 10;
#[doc = "< FAT auto detection"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_FAT_DETECT: TSK_FS_TYPE_ENUM = 14;
#[doc = "< UFS1 (FreeBSD, OpenBSD, BSDI ...)"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_FFS1: TSK_FS_TYPE_ENUM = 16;
#[doc = "< UFS1b (Solaris - has no type)"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_FFS1B: TSK_FS_TYPE_ENUM = 32;
#[doc = "< UFS2 - FreeBSD, NetBSD"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_FFS2: TSK_FS_TYPE_ENUM = 64;
#[doc = "< UFS auto detection"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_FFS_DETECT: TSK_FS_TYPE_ENUM = 112;
#[doc = "< Ext2 file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_EXT2: TSK_FS_TYPE_ENUM = 128;
#[doc = "< Ext3 file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_EXT3: TSK_FS_TYPE_ENUM = 256;
#[doc = "< ExtX auto detection"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_EXT_DETECT: TSK_FS_TYPE_ENUM = 8576;
#[doc = "< SWAP file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_SWAP: TSK_FS_TYPE_ENUM = 512;
#[doc = "< SWAP auto detection"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_SWAP_DETECT: TSK_FS_TYPE_ENUM = 512;
#[doc = "< RAW file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_RAW: TSK_FS_TYPE_ENUM = 1024;
#[doc = "< RAW auto detection"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_RAW_DETECT: TSK_FS_TYPE_ENUM = 1024;
#[doc = "< ISO9660 file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_ISO9660: TSK_FS_TYPE_ENUM = 2048;
#[doc = "< ISO9660 auto detection"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_ISO9660_DETECT: TSK_FS_TYPE_ENUM = 2048;
#[doc = "< HFS+/HFSX file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_HFS: TSK_FS_TYPE_ENUM = 4096;
#[doc = "< HFS auto detection"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_HFS_DETECT: TSK_FS_TYPE_ENUM = 36864;
#[doc = "< Ext4 file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_EXT4: TSK_FS_TYPE_ENUM = 8192;
#[doc = "< YAFFS2 file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_YAFFS2: TSK_FS_TYPE_ENUM = 16384;
#[doc = "< YAFFS2 auto detection"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_YAFFS2_DETECT: TSK_FS_TYPE_ENUM = 16384;
#[doc = "< HFS file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_HFS_LEGACY: TSK_FS_TYPE_ENUM = 32768;
#[doc = "< APFS file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_APFS: TSK_FS_TYPE_ENUM = 65536;
#[doc = "< APFS auto detection"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_APFS_DETECT: TSK_FS_TYPE_ENUM = 65536;
#[doc = "< Unsupported file system"]
pub const TSK_FS_TYPE_ENUM_TSK_FS_TYPE_UNSUPP: TSK_FS_TYPE_ENUM = 4294967295;
#[doc = " Values for the file system type.  Each bit corresponds to a file"]
#[doc = " system. The \"[fs]_DETECT\" value (such as TSK_FS_TYPE_NTSF_DETECT) is"]
#[doc = " the OR of all of the subtypes that"]
#[doc = " it could detect.  If there is only one type of that file system,"]
#[doc = " the [fs]_DETECT value will be the same as the type."]
#[doc = ""]
#[doc = " The _DETECT values should not be stored in TSK_FS_INFO.  Once"]
#[doc = " tsk_fs_open() has detected the type, it should assign the specific"]
#[doc = " version in TSK_FS_INFO."]
#[doc = ""]
pub type TSK_FS_TYPE_ENUM = u32;
#[doc = "< No Flags"]
pub const TSK_FS_INFO_FLAG_ENUM_TSK_FS_INFO_FLAG_NONE: TSK_FS_INFO_FLAG_ENUM = 0;
#[doc = "< File system has sequence numbers in the inode addresses."]
pub const TSK_FS_INFO_FLAG_ENUM_TSK_FS_INFO_FLAG_HAVE_SEQ: TSK_FS_INFO_FLAG_ENUM = 1;
#[doc = "< Nano second field in times will be set."]
pub const TSK_FS_INFO_FLAG_ENUM_TSK_FS_INFO_FLAG_HAVE_NANOSEC: TSK_FS_INFO_FLAG_ENUM = 2;
#[doc = "< File system is encrypted"]
pub const TSK_FS_INFO_FLAG_ENUM_TSK_FS_INFO_FLAG_ENCRYPTED: TSK_FS_INFO_FLAG_ENUM = 4;
#[doc = " Flags for the FS_INFO structure"]
pub type TSK_FS_INFO_FLAG_ENUM = u32;
pub const TSK_FS_ISTAT_FLAG_ENUM_TSK_FS_ISTAT_NONE: TSK_FS_ISTAT_FLAG_ENUM = 0;
pub const TSK_FS_ISTAT_FLAG_ENUM_TSK_FS_ISTAT_RUNLIST: TSK_FS_ISTAT_FLAG_ENUM = 1;
pub type TSK_FS_ISTAT_FLAG_ENUM = u32;
#[doc = " Stores state information for an open file system."]
#[doc = " One of these are generated for each open files system and it contains"]
#[doc = " file system-type specific data.  These values are all filled in by"]
#[doc = " the file system code and not the caller functions.  This struct"]
#[doc = " (and its subclasses) should be allocated only by tsk_fs_malloc"]
#[doc = " and deallocated only by tsk_fs_free, which handle init/deinit"]
#[doc = " of the locks."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TSK_FS_INFO {
    #[doc = "< \\internal Will be set to TSK_FS_INFO_TAG if structure is still allocated, 0 if not"]
    pub tag: ::std::os::raw::c_int,
    pub __bindgen_anon_1: TSK_FS_INFO__bindgen_ty_1,
    #[doc = "< Number of metadata addresses"]
    pub inum_count: TSK_INUM_T,
    #[doc = "< Metadata address of root directory"]
    pub root_inum: TSK_INUM_T,
    #[doc = "< First valid metadata address"]
    pub first_inum: TSK_INUM_T,
    #[doc = "< Last valid metadata address"]
    pub last_inum: TSK_INUM_T,
    #[doc = "< Number of blocks in fs"]
    pub block_count: TSK_DADDR_T,
    #[doc = "< Address of first block"]
    pub first_block: TSK_DADDR_T,
    #[doc = "< Address of last block as reported by file system (could be larger than last_block in image if end of image does not exist)"]
    pub last_block: TSK_DADDR_T,
    #[doc = "< Address of last block -- adjusted so that it is equal to the last block in the image or volume (if image is not complete)"]
    pub last_block_act: TSK_DADDR_T,
    #[doc = "< Size of each block (in bytes)"]
    pub block_size: ::std::os::raw::c_uint,
    #[doc = "< Size of device block (typically always 512)"]
    pub dev_bsize: ::std::os::raw::c_uint,
    #[doc = "< Number of bytes that precede each block (currently only used for RAW CDs)"]
    pub block_pre_size: ::std::os::raw::c_uint,
    #[doc = "< Number of bytes that follow each block (currently only used for RAW CDs)"]
    pub block_post_size: ::std::os::raw::c_uint,
    #[doc = "< Address of journal inode"]
    pub journ_inum: TSK_INUM_T,
    #[doc = "< type of file system"]
    pub ftype: TSK_FS_TYPE_ENUM,
    #[doc = "< string \"name\" of data unit type"]
    pub duname: *const ::std::os::raw::c_char,
    #[doc = "< flags for file system"]
    pub flags: TSK_FS_INFO_FLAG_ENUM,
    #[doc = "< File system id (as reported in boot sector)"]
    pub fs_id: [u8; 32usize],
    #[doc = "< Number of bytes in fs_id that are being used"]
    pub fs_id_used: size_t,
    #[doc = "< Endian order of data"]
    pub endian: TSK_ENDIAN_ENUM,
    pub list_inum_named_lock: tsk_lock_t,
    #[doc = "< List of unallocated inodes that"]
    #[doc = " are pointed to by a file name --"]
    #[doc = " Used to find orphan files.  Is filled"]
    #[doc = " after looking for orphans"]
    #[doc = " or afer a full name_walk is performed."]
    #[doc = " (r/w shared - lock)"]
    pub list_inum_named: *mut TSK_LIST,
    pub orphan_dir_lock: tsk_lock_t,
    #[doc = "< Files and dirs in the top level of the $OrphanFiles directory.  NULL if orphans have not been hunted for yet. (r/w shared - lock)"]
    pub orphan_dir: *mut TSK_FS_DIR,
    #[doc = "< FS-specific function: Call tsk_fs_block_walk() instead."]
    pub block_walk: ::std::option::Option<
        unsafe extern "C" fn(
            fs: *mut TSK_FS_INFO,
            start: TSK_DADDR_T,
            end: TSK_DADDR_T,
            flags: TSK_FS_BLOCK_WALK_FLAG_ENUM,
            cb: TSK_FS_BLOCK_WALK_CB,
            ptr: *mut ::std::os::raw::c_void,
        ) -> u8,
    >,
    #[doc = "< \\internal"]
    pub block_getflags: ::std::option::Option<
        unsafe extern "C" fn(a_fs: *mut TSK_FS_INFO, a_addr: TSK_DADDR_T) -> TSK_FS_BLOCK_FLAG_ENUM,
    >,
    #[doc = "< FS-specific function: Call tsk_fs_meta_walk() instead."]
    pub inode_walk: ::std::option::Option<
        unsafe extern "C" fn(
            fs: *mut TSK_FS_INFO,
            start: TSK_INUM_T,
            end: TSK_INUM_T,
            flags: TSK_FS_META_FLAG_ENUM,
            cb: TSK_FS_META_WALK_CB,
            ptr: *mut ::std::os::raw::c_void,
        ) -> u8,
    >,
    #[doc = "< \\internal"]
    pub file_add_meta: ::std::option::Option<
        unsafe extern "C" fn(
            fs: *mut TSK_FS_INFO,
            fs_file: *mut TSK_FS_FILE,
            addr: TSK_INUM_T,
        ) -> u8,
    >,
    #[doc = "< \\internal"]
    pub get_default_attr_type: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const TSK_FS_FILE) -> TSK_FS_ATTR_TYPE_ENUM,
    >,
    #[doc = "< \\internal"]
    pub load_attrs: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_FS_FILE) -> u8>,
    #[doc = "< \\internal"]
    pub decrypt_block: ::std::option::Option<
        unsafe extern "C" fn(
            fs: *mut TSK_FS_INFO,
            start: TSK_DADDR_T,
            data: *mut ::std::os::raw::c_void,
        ) -> u8,
    >,
    #[doc = " Pointer to file system specific function that prints details on a specific file to a file handle."]
    #[doc = ""]
    #[doc = " @param fs File system file is located in"]
    #[doc = " @param hFile File handle to print text to"]
    #[doc = " @param inum Address of file in file system"]
    #[doc = " @param numblock The number of blocks in file to force print (can go beyond file size)"]
    #[doc = " @param sec_skew Clock skew in seconds to also print times in"]
    #[doc = ""]
    #[doc = " @returns 1 on error and 0 on success"]
    pub istat: ::std::option::Option<
        unsafe extern "C" fn(
            fs: *mut TSK_FS_INFO,
            flags: TSK_FS_ISTAT_FLAG_ENUM,
            hFile: *mut FILE,
            inum: TSK_INUM_T,
            numblock: TSK_DADDR_T,
            sec_skew: i32,
        ) -> u8,
    >,
    #[doc = "< \\internal Call tsk_fs_dir_open_meta() instead."]
    pub dir_open_meta: ::std::option::Option<
        unsafe extern "C" fn(
            fs: *mut TSK_FS_INFO,
            a_fs_dir: *mut *mut TSK_FS_DIR,
            inode: TSK_INUM_T,
        ) -> TSK_RETVAL_ENUM,
    >,
    #[doc = "< \\internal"]
    pub jopen:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_FS_INFO, arg2: TSK_INUM_T) -> u8>,
    #[doc = "< \\internal"]
    pub jblk_walk: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TSK_FS_INFO,
            arg2: TSK_DADDR_T,
            arg3: TSK_DADDR_T,
            arg4: ::std::os::raw::c_int,
            arg5: TSK_FS_JBLK_WALK_CB,
            arg6: *mut ::std::os::raw::c_void,
        ) -> u8,
    >,
    #[doc = "< \\internal"]
    pub jentry_walk: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TSK_FS_INFO,
            arg2: ::std::os::raw::c_int,
            arg3: TSK_FS_JENTRY_WALK_CB,
            arg4: *mut ::std::os::raw::c_void,
        ) -> u8,
    >,
    #[doc = "< \\internal"]
    pub fsstat:
        ::std::option::Option<unsafe extern "C" fn(fs: *mut TSK_FS_INFO, hFile: *mut FILE) -> u8>,
    #[doc = "< \\internal"]
    pub name_cmp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TSK_FS_INFO,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = "< \\internal"]
    pub fscheck:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_FS_INFO, arg2: *mut FILE) -> u8>,
    #[doc = "< FS-specific function: Call tsk_fs_close() instead."]
    pub close: ::std::option::Option<unsafe extern "C" fn(fs: *mut TSK_FS_INFO)>,
    pub fread_owner_sid: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut TSK_FS_FILE, arg2: *mut *mut ::std::os::raw::c_char) -> u8,
    >,
    #[doc = "< \\internal pointer to specific implementation"]
    pub impl_: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSK_FS_INFO__bindgen_ty_1 {
    #[doc = "< Pointer to the image layer state"]
    pub img_info: *mut TSK_IMG_INFO,
    #[doc = "< Byte offset into img_info that fs starts"]
    pub offset: TSK_OFF_T,
}
#[test]
fn bindgen_test_layout_TSK_FS_INFO__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_INFO__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(TSK_FS_INFO__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_INFO__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_INFO__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_INFO__bindgen_ty_1>())).img_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO__bindgen_ty_1),
            "::",
            stringify!(img_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_INFO__bindgen_ty_1>())).offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO__bindgen_ty_1),
            "::",
            stringify!(offset)
        )
    );
}
#[test]
fn bindgen_test_layout_TSK_FS_INFO() {
    assert_eq!(
        ::std::mem::size_of::<TSK_FS_INFO>(),
        424usize,
        concat!("Size of: ", stringify!(TSK_FS_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_FS_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_FS_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).inum_count as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(inum_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).root_inum as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(root_inum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).first_inum as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(first_inum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).last_inum as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(last_inum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).block_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(block_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).first_block as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(first_block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).last_block as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(last_block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).last_block_act as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(last_block_act)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).block_size as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).dev_bsize as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(dev_bsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).block_pre_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(block_pre_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).block_post_size as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(block_post_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).journ_inum as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(journ_inum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).ftype as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(ftype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).duname as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(duname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).flags as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).fs_id as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(fs_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).fs_id_used as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(fs_id_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).endian as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(endian)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_INFO>())).list_inum_named_lock as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(list_inum_named_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).list_inum_named as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(list_inum_named)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).orphan_dir_lock as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(orphan_dir_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).orphan_dir as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(orphan_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).block_walk as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(block_walk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).block_getflags as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(block_getflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).inode_walk as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(inode_walk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).file_add_meta as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(file_add_meta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_FS_INFO>())).get_default_attr_type as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(get_default_attr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).load_attrs as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(load_attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).decrypt_block as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(decrypt_block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).istat as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(istat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).dir_open_meta as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(dir_open_meta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).jopen as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(jopen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).jblk_walk as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(jblk_walk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).jentry_walk as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(jentry_walk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).fsstat as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(fsstat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).name_cmp as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(name_cmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).fscheck as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(fscheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).close as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).fread_owner_sid as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(fread_owner_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_FS_INFO>())).impl_ as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_FS_INFO),
            "::",
            stringify!(impl_)
        )
    );
}
extern "C" {
    pub fn tsk_fs_open_img(
        arg1: *mut TSK_IMG_INFO,
        arg2: TSK_OFF_T,
        arg3: TSK_FS_TYPE_ENUM,
    ) -> *mut TSK_FS_INFO;
}
extern "C" {
    pub fn tsk_fs_open_vol(
        arg1: *const TSK_VS_PART_INFO,
        arg2: TSK_FS_TYPE_ENUM,
    ) -> *mut TSK_FS_INFO;
}
extern "C" {
    pub fn tsk_fs_open_pool(
        arg1: *const TSK_POOL_INFO,
        arg2: TSK_DADDR_T,
        arg3: TSK_FS_TYPE_ENUM,
    ) -> *mut TSK_FS_INFO;
}
extern "C" {
    pub fn tsk_fs_open_img_decrypt(
        arg1: *mut TSK_IMG_INFO,
        arg2: TSK_OFF_T,
        arg3: TSK_FS_TYPE_ENUM,
        password: *const ::std::os::raw::c_char,
    ) -> *mut TSK_FS_INFO;
}
extern "C" {
    pub fn tsk_fs_open_vol_decrypt(
        arg1: *const TSK_VS_PART_INFO,
        arg2: TSK_FS_TYPE_ENUM,
        password: *const ::std::os::raw::c_char,
    ) -> *mut TSK_FS_INFO;
}
extern "C" {
    pub fn tsk_fs_open_pool_decrypt(
        arg1: *const TSK_POOL_INFO,
        arg2: TSK_DADDR_T,
        arg3: TSK_FS_TYPE_ENUM,
        password: *const ::std::os::raw::c_char,
    ) -> *mut TSK_FS_INFO;
}
extern "C" {
    pub fn tsk_fs_close(arg1: *mut TSK_FS_INFO);
}
extern "C" {
    pub fn tsk_fs_type_toid_utf8(arg1: *const ::std::os::raw::c_char) -> TSK_FS_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_fs_type_toid(arg1: *const TSK_TCHAR) -> TSK_FS_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_fs_type_print(arg1: *mut FILE);
}
extern "C" {
    pub fn tsk_fs_type_toname(arg1: TSK_FS_TYPE_ENUM) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tsk_fs_type_supported() -> TSK_FS_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_fs_read(
        a_fs: *mut TSK_FS_INFO,
        a_off: TSK_OFF_T,
        a_buf: *mut ::std::os::raw::c_char,
        a_len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn tsk_fs_read_decrypt(
        a_fs: *mut TSK_FS_INFO,
        a_off: TSK_OFF_T,
        a_buf: *mut ::std::os::raw::c_char,
        a_len: size_t,
        crypto_id: TSK_DADDR_T,
    ) -> ssize_t;
}
extern "C" {
    pub fn tsk_fs_read_block(
        a_fs: *mut TSK_FS_INFO,
        a_addr: TSK_DADDR_T,
        a_buf: *mut ::std::os::raw::c_char,
        a_len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn tsk_fs_read_block_decrypt(
        a_fs: *mut TSK_FS_INFO,
        a_addr: TSK_DADDR_T,
        a_buf: *mut ::std::os::raw::c_char,
        a_len: size_t,
        crypto_id: TSK_DADDR_T,
    ) -> ssize_t;
}
pub const TSK_FS_BLKCALC_FLAG_ENUM_TSK_FS_BLKCALC_DD: TSK_FS_BLKCALC_FLAG_ENUM = 1;
pub const TSK_FS_BLKCALC_FLAG_ENUM_TSK_FS_BLKCALC_BLKLS: TSK_FS_BLKCALC_FLAG_ENUM = 2;
pub const TSK_FS_BLKCALC_FLAG_ENUM_TSK_FS_BLKCALC_SLACK: TSK_FS_BLKCALC_FLAG_ENUM = 4;
#[doc = " LIBRARY ROUTINES FOR COMMAND LINE FUNCTIONS"]
pub type TSK_FS_BLKCALC_FLAG_ENUM = u32;
extern "C" {
    pub fn tsk_fs_blkcalc(
        fs: *mut TSK_FS_INFO,
        flags: TSK_FS_BLKCALC_FLAG_ENUM,
        cnt: TSK_DADDR_T,
    ) -> i8;
}
pub const TSK_FS_BLKCAT_FLAG_ENUM_TSK_FS_BLKCAT_NONE: TSK_FS_BLKCAT_FLAG_ENUM = 0;
pub const TSK_FS_BLKCAT_FLAG_ENUM_TSK_FS_BLKCAT_HEX: TSK_FS_BLKCAT_FLAG_ENUM = 1;
pub const TSK_FS_BLKCAT_FLAG_ENUM_TSK_FS_BLKCAT_ASCII: TSK_FS_BLKCAT_FLAG_ENUM = 2;
pub const TSK_FS_BLKCAT_FLAG_ENUM_TSK_FS_BLKCAT_HTML: TSK_FS_BLKCAT_FLAG_ENUM = 4;
pub const TSK_FS_BLKCAT_FLAG_ENUM_TSK_FS_BLKCAT_STAT: TSK_FS_BLKCAT_FLAG_ENUM = 8;
pub type TSK_FS_BLKCAT_FLAG_ENUM = u32;
extern "C" {
    pub fn tsk_fs_blkcat(
        fs: *mut TSK_FS_INFO,
        flags: TSK_FS_BLKCAT_FLAG_ENUM,
        addr: TSK_DADDR_T,
        read_num_units: TSK_DADDR_T,
    ) -> u8;
}
pub const TSK_FS_BLKLS_FLAG_ENUM_TSK_FS_BLKLS_NONE: TSK_FS_BLKLS_FLAG_ENUM = 0;
pub const TSK_FS_BLKLS_FLAG_ENUM_TSK_FS_BLKLS_CAT: TSK_FS_BLKLS_FLAG_ENUM = 1;
pub const TSK_FS_BLKLS_FLAG_ENUM_TSK_FS_BLKLS_LIST: TSK_FS_BLKLS_FLAG_ENUM = 2;
pub const TSK_FS_BLKLS_FLAG_ENUM_TSK_FS_BLKLS_SLACK: TSK_FS_BLKLS_FLAG_ENUM = 4;
pub type TSK_FS_BLKLS_FLAG_ENUM = u32;
extern "C" {
    pub fn tsk_fs_blkls(
        fs: *mut TSK_FS_INFO,
        lclflags: TSK_FS_BLKLS_FLAG_ENUM,
        bstart: TSK_DADDR_T,
        bend: TSK_DADDR_T,
        flags: TSK_FS_BLOCK_WALK_FLAG_ENUM,
    ) -> u8;
}
extern "C" {
    pub fn tsk_fs_blkstat(fs: *mut TSK_FS_INFO, addr: TSK_DADDR_T) -> u8;
}
pub const TSK_FS_FFIND_FLAG_ENUM_TSK_FS_FFIND_ALL: TSK_FS_FFIND_FLAG_ENUM = 1;
pub type TSK_FS_FFIND_FLAG_ENUM = u32;
extern "C" {
    pub fn tsk_fs_ffind(
        fs: *mut TSK_FS_INFO,
        lclflags: TSK_FS_FFIND_FLAG_ENUM,
        inode: TSK_INUM_T,
        type_: TSK_FS_ATTR_TYPE_ENUM,
        type_used: u8,
        id: u16,
        id_used: u8,
        flags: TSK_FS_DIR_WALK_FLAG_ENUM,
    ) -> u8;
}
pub const TSK_FS_FLS_FLAG_ENUM_TSK_FS_FLS_NONE: TSK_FS_FLS_FLAG_ENUM = 0;
pub const TSK_FS_FLS_FLAG_ENUM_TSK_FS_FLS_DOT: TSK_FS_FLS_FLAG_ENUM = 1;
pub const TSK_FS_FLS_FLAG_ENUM_TSK_FS_FLS_LONG: TSK_FS_FLS_FLAG_ENUM = 2;
pub const TSK_FS_FLS_FLAG_ENUM_TSK_FS_FLS_FILE: TSK_FS_FLS_FLAG_ENUM = 4;
pub const TSK_FS_FLS_FLAG_ENUM_TSK_FS_FLS_DIR: TSK_FS_FLS_FLAG_ENUM = 8;
pub const TSK_FS_FLS_FLAG_ENUM_TSK_FS_FLS_FULL: TSK_FS_FLS_FLAG_ENUM = 16;
pub const TSK_FS_FLS_FLAG_ENUM_TSK_FS_FLS_MAC: TSK_FS_FLS_FLAG_ENUM = 32;
pub const TSK_FS_FLS_FLAG_ENUM_TSK_FS_FLS_HASH: TSK_FS_FLS_FLAG_ENUM = 64;
pub type TSK_FS_FLS_FLAG_ENUM = u32;
extern "C" {
    pub fn tsk_fs_fls(
        fs: *mut TSK_FS_INFO,
        lclflags: TSK_FS_FLS_FLAG_ENUM,
        inode: TSK_INUM_T,
        flags: TSK_FS_DIR_WALK_FLAG_ENUM,
        pre: *mut TSK_TCHAR,
        skew: i32,
    ) -> u8;
}
extern "C" {
    pub fn tsk_fs_icat(
        fs: *mut TSK_FS_INFO,
        inum: TSK_INUM_T,
        type_: TSK_FS_ATTR_TYPE_ENUM,
        type_used: u8,
        id: u16,
        id_used: u8,
        flags: TSK_FS_FILE_WALK_FLAG_ENUM,
    ) -> u8;
}
pub const TSK_FS_IFIND_FLAG_ENUM_TSK_FS_IFIND_NONE: TSK_FS_IFIND_FLAG_ENUM = 0;
pub const TSK_FS_IFIND_FLAG_ENUM_TSK_FS_IFIND_ALL: TSK_FS_IFIND_FLAG_ENUM = 1;
pub const TSK_FS_IFIND_FLAG_ENUM_TSK_FS_IFIND_PAR_LONG: TSK_FS_IFIND_FLAG_ENUM = 2;
pub type TSK_FS_IFIND_FLAG_ENUM = u32;
extern "C" {
    pub fn tsk_fs_ifind_path(
        fs: *mut TSK_FS_INFO,
        path: *mut TSK_TCHAR,
        result: *mut TSK_INUM_T,
    ) -> i8;
}
extern "C" {
    pub fn tsk_fs_ifind_data(
        fs: *mut TSK_FS_INFO,
        flags: TSK_FS_IFIND_FLAG_ENUM,
        blk: TSK_DADDR_T,
    ) -> u8;
}
extern "C" {
    pub fn tsk_fs_ifind_par(
        fs: *mut TSK_FS_INFO,
        flags: TSK_FS_IFIND_FLAG_ENUM,
        par: TSK_INUM_T,
    ) -> u8;
}
pub const TSK_FS_ILS_FLAG_ENUM_TSK_FS_ILS_NONE: TSK_FS_ILS_FLAG_ENUM = 0;
pub const TSK_FS_ILS_FLAG_ENUM_TSK_FS_ILS_OPEN: TSK_FS_ILS_FLAG_ENUM = 1;
pub const TSK_FS_ILS_FLAG_ENUM_TSK_FS_ILS_MAC: TSK_FS_ILS_FLAG_ENUM = 2;
pub const TSK_FS_ILS_FLAG_ENUM_TSK_FS_ILS_LINK: TSK_FS_ILS_FLAG_ENUM = 4;
pub const TSK_FS_ILS_FLAG_ENUM_TSK_FS_ILS_UNLINK: TSK_FS_ILS_FLAG_ENUM = 8;
pub type TSK_FS_ILS_FLAG_ENUM = u32;
extern "C" {
    pub fn tsk_fs_ils(
        fs: *mut TSK_FS_INFO,
        lclflags: TSK_FS_ILS_FLAG_ENUM,
        istart: TSK_INUM_T,
        ilast: TSK_INUM_T,
        flags: TSK_FS_META_FLAG_ENUM,
        skew: i32,
        img: *const TSK_TCHAR,
    ) -> u8;
}
extern "C" {
    pub fn tsk_fs_parse_inum(
        str: *const TSK_TCHAR,
        arg1: *mut TSK_INUM_T,
        arg2: *mut TSK_FS_ATTR_TYPE_ENUM,
        arg3: *mut u8,
        arg4: *mut u16,
        arg5: *mut u8,
    ) -> ::std::os::raw::c_int;
}
#[doc = "< Quickly return if hash is found (do not return file name etc.)"]
pub const TSK_HDB_FLAG_ENUM_TSK_HDB_FLAG_QUICK: TSK_HDB_FLAG_ENUM = 1;
#[doc = "< Return other details besides only file name (not used"]
pub const TSK_HDB_FLAG_ENUM_TSK_HDB_FLAG_EXT: TSK_HDB_FLAG_ENUM = 2;
#[doc = " Flags used for lookups"]
pub type TSK_HDB_FLAG_ENUM = u32;
#[doc = "< Invalid algorithm signals error."]
pub const TSK_HDB_HTYPE_ENUM_TSK_HDB_HTYPE_INVALID_ID: TSK_HDB_HTYPE_ENUM = 0;
#[doc = "< MD5 Algorithm"]
pub const TSK_HDB_HTYPE_ENUM_TSK_HDB_HTYPE_MD5_ID: TSK_HDB_HTYPE_ENUM = 1;
#[doc = "< SHA1 Algorithm"]
pub const TSK_HDB_HTYPE_ENUM_TSK_HDB_HTYPE_SHA1_ID: TSK_HDB_HTYPE_ENUM = 2;
#[doc = "< SHA2-256 (aka SHA-256) Algorithm"]
pub const TSK_HDB_HTYPE_ENUM_TSK_HDB_HTYPE_SHA2_256_ID: TSK_HDB_HTYPE_ENUM = 4;
#[doc = " Hash algorithm types"]
pub type TSK_HDB_HTYPE_ENUM = u32;
#[doc = "< Invalid type signals error."]
pub const TSK_HDB_DBTYPE_ENUM_TSK_HDB_DBTYPE_INVALID_ID: TSK_HDB_DBTYPE_ENUM = 0;
#[doc = "< NIST NSRL format"]
pub const TSK_HDB_DBTYPE_ENUM_TSK_HDB_DBTYPE_NSRL_ID: TSK_HDB_DBTYPE_ENUM = 1;
#[doc = "< md5sum format"]
pub const TSK_HDB_DBTYPE_ENUM_TSK_HDB_DBTYPE_MD5SUM_ID: TSK_HDB_DBTYPE_ENUM = 2;
#[doc = "< hashkeeper format"]
pub const TSK_HDB_DBTYPE_ENUM_TSK_HDB_DBTYPE_HK_ID: TSK_HDB_DBTYPE_ENUM = 3;
#[doc = "< Only the database index was opened -- original dbtype is unknown"]
pub const TSK_HDB_DBTYPE_ENUM_TSK_HDB_DBTYPE_IDXONLY_ID: TSK_HDB_DBTYPE_ENUM = 4;
#[doc = "< EnCase format"]
pub const TSK_HDB_DBTYPE_ENUM_TSK_HDB_DBTYPE_ENCASE_ID: TSK_HDB_DBTYPE_ENUM = 5;
#[doc = "< SQLite format"]
pub const TSK_HDB_DBTYPE_ENUM_TSK_HDB_DBTYPE_SQLITE_ID: TSK_HDB_DBTYPE_ENUM = 6;
#[doc = " Hash Database types"]
pub type TSK_HDB_DBTYPE_ENUM = u32;
pub type TSK_HDB_LOOKUP_FN = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TSK_HDB_INFO,
        hash: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
    ) -> TSK_WALK_RET_ENUM,
>;
#[doc = " Represents an open hash database. Instances are created using the"]
#[doc = " tsk_hdb_open() API and are passed to hash database API functions."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TSK_HDB_INFO {
    #[doc = "< Database file path, may be NULL for an index only database"]
    pub db_fname: *mut TSK_TCHAR,
    #[doc = "< Name of the database, for callbacks"]
    pub db_name: [::std::os::raw::c_char; 512usize],
    #[doc = "< Type of database"]
    pub db_type: TSK_HDB_DBTYPE_ENUM,
    #[doc = "< Lock for lazy loading and idx_lbuf"]
    pub lock: tsk_lock_t,
    #[doc = "< Flag set and unset when transaction are begun and ended"]
    pub transaction_in_progress: u8,
    pub get_db_path:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_HDB_INFO) -> *const TSK_TCHAR>,
    pub get_display_name: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut TSK_HDB_INFO) -> *const ::std::os::raw::c_char,
    >,
    pub uses_external_indexes: ::std::option::Option<unsafe extern "C" fn() -> u8>,
    pub get_index_path: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut TSK_HDB_INFO, arg2: TSK_HDB_HTYPE_ENUM) -> *const TSK_TCHAR,
    >,
    pub has_index: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut TSK_HDB_INFO, arg2: TSK_HDB_HTYPE_ENUM) -> u8,
    >,
    pub make_index: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut TSK_HDB_INFO, arg2: *mut TSK_TCHAR) -> u8,
    >,
    pub open_index: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut TSK_HDB_INFO, arg2: TSK_HDB_HTYPE_ENUM) -> u8,
    >,
    pub lookup_str: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TSK_HDB_INFO,
            arg2: *const ::std::os::raw::c_char,
            arg3: TSK_HDB_FLAG_ENUM,
            arg4: TSK_HDB_LOOKUP_FN,
            arg5: *mut ::std::os::raw::c_void,
        ) -> i8,
    >,
    pub lookup_raw: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TSK_HDB_INFO,
            arg2: *mut u8,
            arg3: u8,
            arg4: TSK_HDB_FLAG_ENUM,
            arg5: TSK_HDB_LOOKUP_FN,
            arg6: *mut ::std::os::raw::c_void,
        ) -> i8,
    >,
    pub lookup_verbose_str: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TSK_HDB_INFO,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_void,
        ) -> i8,
    >,
    pub accepts_updates: ::std::option::Option<unsafe extern "C" fn() -> u8>,
    pub add_entry: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TSK_HDB_INFO,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
            arg5: *const ::std::os::raw::c_char,
            arg6: *const ::std::os::raw::c_char,
        ) -> u8,
    >,
    pub begin_transaction:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_HDB_INFO) -> u8>,
    pub commit_transaction:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_HDB_INFO) -> u8>,
    pub rollback_transaction:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_HDB_INFO) -> u8>,
    pub close_db: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TSK_HDB_INFO)>,
}
#[test]
fn bindgen_test_layout_TSK_HDB_INFO() {
    assert_eq!(
        ::std::mem::size_of::<TSK_HDB_INFO>(),
        704usize,
        concat!("Size of: ", stringify!(TSK_HDB_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_HDB_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_HDB_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).db_fname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(db_fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).db_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(db_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).db_type as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(db_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).lock as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_HDB_INFO>())).transaction_in_progress as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(transaction_in_progress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).get_db_path as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(get_db_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).get_display_name as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(get_display_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_HDB_INFO>())).uses_external_indexes as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(uses_external_indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).get_index_path as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(get_index_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).has_index as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(has_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).make_index as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(make_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).open_index as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(open_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).lookup_str as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(lookup_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).lookup_raw as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(lookup_raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).lookup_verbose_str as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(lookup_verbose_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).accepts_updates as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(accepts_updates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).add_entry as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(add_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).begin_transaction as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(begin_transaction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).commit_transaction as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(commit_transaction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_HDB_INFO>())).rollback_transaction as *const _ as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(rollback_transaction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_INFO>())).close_db as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_INFO),
            "::",
            stringify!(close_db)
        )
    );
}
#[doc = " Represents a text-format hash database (NSRL, EnCase, etc.) with the TSK binary search index."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TSK_HDB_BINSRCH_INFO {
    pub base: TSK_HDB_INFO,
    #[doc = "< File handle to database (always open)"]
    pub hDb: *mut FILE,
    #[doc = "< \\internal Database-specific function to find entry at a given offset"]
    pub get_entry: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TSK_HDB_INFO,
            arg2: *const ::std::os::raw::c_char,
            arg3: TSK_OFF_T,
            arg4: TSK_HDB_FLAG_ENUM,
            arg5: TSK_HDB_LOOKUP_FN,
            arg6: *mut ::std::os::raw::c_void,
        ) -> u8,
    >,
    #[doc = "< Type of hash used in currently open index"]
    pub hash_type: TSK_HDB_HTYPE_ENUM,
    #[doc = "< Length of hash used in currently open index"]
    pub hash_len: u16,
    #[doc = "< Name of index file, may be NULL for database without external index"]
    pub idx_fname: *mut TSK_TCHAR,
    #[doc = "< File handle to index (only open during lookups)"]
    pub hIdx: *mut FILE,
    #[doc = "< File handle to temp (unsorted) index file (only open during index creation)"]
    pub hIdxTmp: *mut FILE,
    #[doc = "< Name of unsorted index file"]
    pub uns_fname: *mut TSK_TCHAR,
    #[doc = "< Size of index file"]
    pub idx_size: TSK_OFF_T,
    #[doc = "< Offset in index file to first index entry"]
    pub idx_off: u16,
    #[doc = "< Length of each line in index"]
    pub idx_llen: size_t,
    #[doc = "< Buffer to hold a line from the index  (r/w shared - lock)"]
    pub idx_lbuf: *mut ::std::os::raw::c_char,
    #[doc = "< Name of index of index file, may be NULL"]
    pub idx_idx_fname: *mut TSK_TCHAR,
    #[doc = "< Maps the first three bytes of a hash value to an offset in the index file"]
    pub idx_offsets: *mut u64,
}
#[test]
fn bindgen_test_layout_TSK_HDB_BINSRCH_INFO() {
    assert_eq!(
        ::std::mem::size_of::<TSK_HDB_BINSRCH_INFO>(),
        808usize,
        concat!("Size of: ", stringify!(TSK_HDB_BINSRCH_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<TSK_HDB_BINSRCH_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(TSK_HDB_BINSRCH_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).hDb as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(hDb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).get_entry as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(get_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).hash_type as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(hash_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).hash_len as *const _ as usize },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(hash_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).idx_fname as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(idx_fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).hIdx as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(hIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).hIdxTmp as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(hIdxTmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).uns_fname as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(uns_fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).idx_size as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(idx_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).idx_off as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(idx_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).idx_llen as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(idx_llen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).idx_lbuf as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(idx_lbuf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).idx_idx_fname as *const _ as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(idx_idx_fname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSK_HDB_BINSRCH_INFO>())).idx_offsets as *const _ as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(TSK_HDB_BINSRCH_INFO),
            "::",
            stringify!(idx_offsets)
        )
    );
}
#[doc = "< No special flags"]
pub const TSK_HDB_OPEN_ENUM_TSK_HDB_OPEN_NONE: TSK_HDB_OPEN_ENUM = 0;
#[doc = "< Open only the index -- do not look for the original DB"]
pub const TSK_HDB_OPEN_ENUM_TSK_HDB_OPEN_IDXONLY: TSK_HDB_OPEN_ENUM = 1;
#[doc = " Options for opening a hash database"]
pub type TSK_HDB_OPEN_ENUM = u32;
extern "C" {
    pub fn tsk_hdb_create(arg1: *mut TSK_TCHAR) -> u8;
}
extern "C" {
    pub fn tsk_hdb_open(arg1: *mut TSK_TCHAR, arg2: TSK_HDB_OPEN_ENUM) -> *mut TSK_HDB_INFO;
}
extern "C" {
    pub fn tsk_hdb_get_db_path(hdb_info: *mut TSK_HDB_INFO) -> *const TSK_TCHAR;
}
extern "C" {
    pub fn tsk_hdb_get_display_name(hdb_info: *mut TSK_HDB_INFO) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tsk_hdb_is_idx_only(arg1: *mut TSK_HDB_INFO) -> u8;
}
extern "C" {
    pub fn tsk_hdb_uses_external_indexes(arg1: *mut TSK_HDB_INFO) -> u8;
}
extern "C" {
    pub fn tsk_hdb_has_idx(hdb_info: *mut TSK_HDB_INFO, arg1: TSK_HDB_HTYPE_ENUM) -> u8;
}
extern "C" {
    pub fn tsk_hdb_make_index(arg1: *mut TSK_HDB_INFO, arg2: *mut TSK_TCHAR) -> u8;
}
extern "C" {
    pub fn tsk_hdb_get_idx_path(
        arg1: *mut TSK_HDB_INFO,
        arg2: TSK_HDB_HTYPE_ENUM,
    ) -> *const TSK_TCHAR;
}
extern "C" {
    pub fn tsk_hdb_open_idx(arg1: *mut TSK_HDB_INFO, arg2: TSK_HDB_HTYPE_ENUM) -> u8;
}
extern "C" {
    pub fn tsk_hdb_lookup_str(
        arg1: *mut TSK_HDB_INFO,
        arg2: *const ::std::os::raw::c_char,
        arg3: TSK_HDB_FLAG_ENUM,
        arg4: TSK_HDB_LOOKUP_FN,
        arg5: *mut ::std::os::raw::c_void,
    ) -> i8;
}
extern "C" {
    pub fn tsk_hdb_lookup_raw(
        arg1: *mut TSK_HDB_INFO,
        arg2: *mut u8,
        arg3: u8,
        arg4: TSK_HDB_FLAG_ENUM,
        arg5: TSK_HDB_LOOKUP_FN,
        arg6: *mut ::std::os::raw::c_void,
    ) -> i8;
}
extern "C" {
    pub fn tsk_hdb_lookup_verbose_str(
        arg1: *mut TSK_HDB_INFO,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> i8;
}
extern "C" {
    pub fn tsk_hdb_accepts_updates(arg1: *mut TSK_HDB_INFO) -> u8;
}
extern "C" {
    pub fn tsk_hdb_add_entry(
        arg1: *mut TSK_HDB_INFO,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *const ::std::os::raw::c_char,
    ) -> u8;
}
extern "C" {
    pub fn tsk_hdb_begin_transaction(arg1: *mut TSK_HDB_INFO) -> u8;
}
extern "C" {
    pub fn tsk_hdb_commit_transaction(arg1: *mut TSK_HDB_INFO) -> u8;
}
extern "C" {
    pub fn tsk_hdb_rollback_transaction(arg1: *mut TSK_HDB_INFO) -> u8;
}
extern "C" {
    pub fn tsk_hdb_close(arg1: *mut TSK_HDB_INFO);
}
#[doc = "< Use autodetection methods"]
pub const TSK_POOL_TYPE_ENUM_TSK_POOL_TYPE_DETECT: TSK_POOL_TYPE_ENUM = 0;
#[doc = "< APFS Pooled Volumes"]
pub const TSK_POOL_TYPE_ENUM_TSK_POOL_TYPE_APFS: TSK_POOL_TYPE_ENUM = 1;
#[doc = "< Unsupported pool container type"]
pub const TSK_POOL_TYPE_ENUM_TSK_POOL_TYPE_UNSUPP: TSK_POOL_TYPE_ENUM = 65535;
pub type TSK_POOL_TYPE_ENUM = u32;
pub const TSK_POOL_VOLUME_FLAGS_TSK_POOL_VOLUME_FLAG_ENCRYPTED: TSK_POOL_VOLUME_FLAGS = 1;
pub const TSK_POOL_VOLUME_FLAGS_TSK_POOL_VOLUME_FLAG_CASE_SENSITIVE: TSK_POOL_VOLUME_FLAGS = 2;
pub type TSK_POOL_VOLUME_FLAGS = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TSK_POOL_VOLUME_INFO {
    #[doc = "< Set to TSK_POOL_VOLUME_INFO_TAG when struct is alloc"]
    pub tag: u32,
    #[doc = "< Index of Volume"]
    pub index: ::std::os::raw::c_int,
    #[doc = "< Description"]
    pub desc: *mut ::std::os::raw::c_char,
    #[doc = "< Password hint for encrypted volumes"]
    pub password_hint: *mut ::std::os::raw::c_char,
    #[doc = "< Starting Block number"]
    pub block: u64,
    #[doc = "< Number of blocks in the volume"]
    pub num_blocks: u64,
    #[doc = "< Next Volume"]
    pub next: *mut _TSK_POOL_VOLUME_INFO,
    #[doc = "< Previous Volume"]
    pub prev: *mut _TSK_POOL_VOLUME_INFO,
    pub flags: TSK_POOL_VOLUME_FLAGS,
}
#[test]
fn bindgen_test_layout__TSK_POOL_VOLUME_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_TSK_POOL_VOLUME_INFO>(),
        64usize,
        concat!("Size of: ", stringify!(_TSK_POOL_VOLUME_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_TSK_POOL_VOLUME_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(_TSK_POOL_VOLUME_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_VOLUME_INFO>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_VOLUME_INFO),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_VOLUME_INFO>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_VOLUME_INFO),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_VOLUME_INFO>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_VOLUME_INFO),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TSK_POOL_VOLUME_INFO>())).password_hint as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_VOLUME_INFO),
            "::",
            stringify!(password_hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_VOLUME_INFO>())).block as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_VOLUME_INFO),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TSK_POOL_VOLUME_INFO>())).num_blocks as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_VOLUME_INFO),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_VOLUME_INFO>())).next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_VOLUME_INFO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_VOLUME_INFO>())).prev as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_VOLUME_INFO),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_VOLUME_INFO>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_VOLUME_INFO),
            "::",
            stringify!(flags)
        )
    );
}
pub type TSK_POOL_VOLUME_INFO = _TSK_POOL_VOLUME_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TSK_POOL_INFO {
    #[doc = "< Set to TSK_POOL_INFO_TAG when struct is alloc"]
    pub tag: u32,
    #[doc = "< Type of pool container"]
    pub ctype: TSK_POOL_TYPE_ENUM,
    #[doc = "< Block size"]
    pub block_size: u32,
    #[doc = "< Number of blocks"]
    pub num_blocks: u64,
    #[doc = "< Number of volumes"]
    pub num_vols: ::std::os::raw::c_int,
    #[doc = "< The image offset of the pool"]
    pub img_offset: u64,
    #[doc = "< Linked list of volume info structs"]
    pub vol_list: *mut TSK_POOL_VOLUME_INFO,
    #[doc = "< \\internal"]
    pub close: ::std::option::Option<unsafe extern "C" fn(arg1: *const _TSK_POOL_INFO)>,
    pub poolstat: ::std::option::Option<
        unsafe extern "C" fn(pool: *const _TSK_POOL_INFO, hFile: *mut FILE) -> u8,
    >,
    pub get_img_info: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *const _TSK_POOL_INFO,
            pvol_block: TSK_DADDR_T,
        ) -> *mut TSK_IMG_INFO,
    >,
    #[doc = "< \\internal Implementation specific pointer"]
    pub impl_: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__TSK_POOL_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_TSK_POOL_INFO>(),
        80usize,
        concat!("Size of: ", stringify!(_TSK_POOL_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_TSK_POOL_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(_TSK_POOL_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).ctype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(ctype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).block_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).num_blocks as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).num_vols as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(num_vols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).img_offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(img_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).vol_list as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(vol_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).close as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).poolstat as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(poolstat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).get_img_info as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(get_img_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TSK_POOL_INFO>())).impl_ as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TSK_POOL_INFO),
            "::",
            stringify!(impl_)
        )
    );
}
extern "C" {
    pub fn tsk_pool_open_sing(
        part: *const TSK_VS_PART_INFO,
        type_: TSK_POOL_TYPE_ENUM,
    ) -> *const TSK_POOL_INFO;
}
extern "C" {
    pub fn tsk_pool_open(
        num_vols: ::std::os::raw::c_int,
        parts: *const *const TSK_VS_PART_INFO,
        type_: TSK_POOL_TYPE_ENUM,
    ) -> *const TSK_POOL_INFO;
}
extern "C" {
    pub fn tsk_pool_open_img_sing(
        img: *mut TSK_IMG_INFO,
        offset: TSK_OFF_T,
        type_: TSK_POOL_TYPE_ENUM,
    ) -> *const TSK_POOL_INFO;
}
extern "C" {
    pub fn tsk_pool_open_img(
        num_imgs: ::std::os::raw::c_int,
        imgs: *const *mut TSK_IMG_INFO,
        offsets: *const TSK_OFF_T,
        type_: TSK_POOL_TYPE_ENUM,
    ) -> *const TSK_POOL_INFO;
}
extern "C" {
    pub fn tsk_pool_close(arg1: *const TSK_POOL_INFO);
}
extern "C" {
    pub fn tsk_pool_read(
        a_fs: *mut TSK_POOL_INFO,
        a_off: TSK_OFF_T,
        a_buf: *mut ::std::os::raw::c_char,
        a_len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn tsk_pool_unallocated_runs(arg1: *const TSK_POOL_INFO) -> *mut TSK_FS_ATTR_RUN;
}
extern "C" {
    pub fn tsk_pool_type_toid(str: *const TSK_TCHAR) -> TSK_POOL_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_pool_type_toid_utf8(str: *const ::std::os::raw::c_char) -> TSK_POOL_TYPE_ENUM;
}
extern "C" {
    pub fn tsk_pool_type_print(hFile: *mut FILE);
}
extern "C" {
    pub fn tsk_pool_type_toname(ptype: TSK_POOL_TYPE_ENUM) -> *const ::std::os::raw::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
